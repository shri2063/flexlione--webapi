Index: Services/SprintManagementService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Data.SqlClient;\r\nusing System.Linq;\r\nusing flexli_erp_webapi.DataModels;\r\nusing flexli_erp_webapi.EditModels;\r\nusing flexli_erp_webapi.Services.Interfaces;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Razor.Language;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace flexli_erp_webapi.Services\r\n{\r\n    public class SprintManagementService\r\n    {\r\n        private readonly ScoreManagementService _scoreManagementService;\r\n\r\n        public SprintManagementService(ScoreManagementService scoreManagementService)\r\n        {\r\n            _scoreManagementService = scoreManagementService;\r\n        }\r\n        \r\n        public static List<SprintEditModel> GetSprintsByProfileId(string profileId, List<string> include = null, int? pageIndex = null, int? pageSize = null)\r\n        {\r\n          \r\n            List<string> sprintIds = GetSprintIdsForProfileId(profileId, pageIndex, pageSize);\r\n            List<SprintEditModel> sprints = new List<SprintEditModel>();\r\n            \r\n            // [Check] At-least one Sprint exists\r\n            if (sprintIds == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            sprintIds.ForEach(x =>\r\n            {\r\n\r\n                sprints.Add(GetSprintById(x,include != null?new List<string>(include):null)); \r\n\r\n            });\r\n\r\n            return sprints;\r\n\r\n        }\r\n\r\n        public static SprintEditModel GetSprintById(string sprintId, List<string> include = null)\r\n        {\r\n            SprintEditModel sprint =  GetSprintByIdFromDb(sprintId);\r\n            if (sprint == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (include == null)\r\n            {\r\n                return sprint;\r\n            }\r\n            sprint.PlannedTasks = new List<TaskDetailEditModel>();\r\n            if (include.Contains(\"plannedTask\"))\r\n            {\r\n                sprint.PlannedTasks = GetPlannedTasksForSprint(sprintId);\r\n            }\r\n            \r\n            if (include.Contains(\"unPlannedTask\"))\r\n            {\r\n                sprint.UnPlannedTasks = GetUnPlannedTasksForSprint(sprintId);\r\n            }\r\n\r\n            return sprint;\r\n        }\r\n\r\n        private static List<TaskDetailEditModel> GetPlannedTasksForSprint(string sprintId)\r\n        {\r\n            List<TaskDetailEditModel> plannedTasks = new List<TaskDetailEditModel>();\r\n            List<string> taskDetailIds = TaskManagementService.GetTaskIdsForSprint(sprintId);\r\n            if(taskDetailIds != null){ taskDetailIds.ForEach(x =>\r\n                plannedTasks.Add(TaskManagementService.GetTaskById(x))) ;}\r\n\r\n            foreach (var plannedTask in plannedTasks)\r\n            {\r\n                decimal actualHrs = 0;\r\n              \r\n                List<TaskSummaryEditModel> taskSummeries =  TaskSummaryManagementService.GetAllTaskSummaryByTaskId(plannedTask.TaskId) ;\r\n                foreach (var taskSummery in taskSummeries)\r\n                {\r\n                    actualHrs += taskSummery.ActualHour;\r\n                }\r\n\r\n                plannedTask.ActualHours = actualHrs;\r\n            }\r\n\r\n            return plannedTasks;\r\n        }\r\n        \r\n        public static List<TaskDetailEditModel> GetUnPlannedTasksForSprint(string sprintId)\r\n        {\r\n            List<TaskDetailEditModel> unPlannedTasks = new List<TaskDetailEditModel>();\r\n            List<string> plannedTaskDetailIds = TaskManagementService.GetTaskIdsForSprint(sprintId);\r\n            var sprint = GetSprintById(sprintId);\r\n            if (sprint == null)\r\n            {\r\n                return unPlannedTasks;\r\n                \r\n            }\r\n\r\n            // WaterFall: get All Task Ids covered in Sprint Span\r\n            var calenderTaskIds = (\r\n                from s in \r\n                TaskScheduleManagementService.GetAllTaskScheduleByProfileIdAndDateRange(sprint.Owner, sprint.FromDate,\r\n                sprint.ToDate)\r\n                select s.TaskId)\r\n                .Distinct()\r\n                .ToList();\r\n            \r\n            var unPlannedTaskIds = new List<string>(calenderTaskIds);\r\n            // Filter Task Ids  which have upstream in planned task ids\r\n            foreach (var taskId in calenderTaskIds)\r\n            {\r\n                var upStreamTaskIds = (from s in\r\n                        TaskHierarchyManagementService.GetTaskHierarchyByIdFromDb(taskId).ChildrenTaskIdList\r\n                    select s).ToList();\r\n                \r\n                var commonTaskIds = upStreamTaskIds.Intersect(plannedTaskDetailIds).ToList();\r\n\r\n                if (commonTaskIds.Any())\r\n                {\r\n                     unPlannedTaskIds.Remove(taskId);\r\n                }\r\n            }\r\n            \r\n            // Filter Task Schedules which have upstream in another unplanned task schedules\r\n            var filteredUnPlannedTaskIds = new List<string>(unPlannedTaskIds);\r\n            \r\n            foreach (var taskId in unPlannedTaskIds)\r\n            {\r\n                var upStreamTaskIds = (from s in\r\n                        TaskHierarchyManagementService.GetTaskHierarchyByIdFromDb(taskId).ChildrenTaskIdList\r\n                    select s).ToList();\r\n                upStreamTaskIds.RemoveAt(0);\r\n                var commonTaskIds = upStreamTaskIds.Intersect(unPlannedTaskIds);\r\n\r\n                if (commonTaskIds.Any())\r\n                {\r\n                    filteredUnPlannedTaskIds.Remove(taskId);\r\n                }\r\n            }\r\n            \r\n            \r\n            unPlannedTaskIds.ForEach(x => unPlannedTasks.Add(TaskManagementService.GetTaskById(x)));\r\n            return unPlannedTasks;\r\n        }\r\n\r\n        private static List<string> GetSprintIdsForProfileId(string profileId, int? pageIndex = null, int? pageSize = null, string include = null)\r\n        {\r\n            List<string> sprintIds = new List<string>();\r\n            using (var db = new ErpContext())\r\n            {\r\n                // [Check] : Pagination\r\n                if (pageIndex != null && pageSize != null)\r\n                {\r\n                    if (pageIndex <= 0 || pageSize <= 0)\r\n                        throw new ArgumentException(\"Incorrect value for pageIndex or pageSize\");\r\n                \r\n                    // skip take logic\r\n                    sprintIds = db.Sprint\r\n                        .Where(x => x.Owner == profileId)\r\n                        .Select(x => x.SprintId).AsEnumerable()\r\n                        .OrderByDescending(Convert.ToInt32)\r\n                        .Skip(((int) pageIndex - 1) * (int) pageSize).Take((int) pageSize).ToList();\r\n\r\n                    if (sprintIds.Count == 0)\r\n                    {\r\n                        throw new ArgumentException(\"Incorrect value for pageIndex or pageSize\");\r\n                    }\r\n                    return sprintIds;\r\n                }\r\n                             \r\n                sprintIds = db.Sprint\r\n                    .Where(x => x.Owner == profileId)\r\n                    .Select(x => x.SprintId).AsEnumerable()\r\n                    .OrderByDescending(Convert.ToInt32)\r\n                    .ToList();\r\n            }\r\n\r\n            return sprintIds;\r\n\r\n        }\r\n        \r\n        \r\n        \r\n        public static SprintEditModel AddOrUpdateSprint(SprintEditModel sprintEditModel)\r\n        {\r\n            // [Check]: Previous all sprints closed in case of new sprint\r\n            if (GetSprintById(sprintEditModel.SprintId) == null)\r\n            {\r\n                List<SprintEditModel> sprints = GetSprintsByProfileId(sprintEditModel.Owner);\r\n\r\n                if (sprints.Count > 0)\r\n                {\r\n                    var openSprints = sprints.FindAll(x => (!x.Closed))\r\n                        .Count;\r\n                    if (openSprints > 0)\r\n                    {\r\n                        throw new ConstraintException(\"All Previous sprints need to be closed\");\r\n                    }\r\n                }\r\n\r\n            }\r\n              \r\n            \r\n            \r\n            // [Check]: Sprint is in planning state in case of already created sprint\r\n\r\n            if (GetSprintById(sprintEditModel.SprintId) != null)\r\n            {\r\n              if(GetSprintById(sprintEditModel.SprintId).Status != SStatus.Planning)\r\n                  \r\n                throw new ConstraintException(\"Sprint  can be updated only in planning stage \");\r\n            }\r\n            \r\n            return AddOrUpdateSprintInDb(sprintEditModel);\r\n\r\n        }\r\n        \r\n       \r\n        \r\n        private static SprintEditModel GetSprintByIdFromDb (string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                \r\n                Sprint existingSprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                // [Check]: Sprint does not exist\r\n                if (existingSprint == null)\r\n                {\r\n                    return null;\r\n                }\r\n\r\n                SprintEditModel sprintEditModel = new SprintEditModel()\r\n                {\r\n                   SprintId = existingSprint.SprintId,\r\n                   Description = existingSprint.Description,\r\n                   Owner = existingSprint.Owner,\r\n                   FromDate = existingSprint.FromDate,\r\n                   ToDate = existingSprint.ToDate,\r\n                   Score = existingSprint.Score,\r\n                   Status = (SStatus) Enum.Parse(typeof(SStatus), existingSprint.Status, true),\r\n                   Approved = existingSprint.Approved,\r\n                   Closed = existingSprint.Closed,\r\n                   SprintNo = existingSprint.SprintNo,\r\n                   ScorePolicy = Enum.TryParse<EScorePolicyType>(existingSprint.ScorePolicy, true, out var scorePolicyType) ? scorePolicyType : (EScorePolicyType?)null\r\n                };\r\n\r\n                return sprintEditModel;\r\n            }\r\n\r\n        }\r\n        \r\n        private static SprintEditModel AddOrUpdateSprintInDb(SprintEditModel sprintEditModel)\r\n        {\r\n            Sprint sprint;\r\n            \r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintEditModel.SprintId);\r\n\r\n\r\n                if (sprint != null) // update\r\n                {\r\n                    \r\n                    sprint.Description = sprintEditModel.Description;\r\n                    sprint.SprintNo = sprintEditModel.SprintNo;\r\n                    sprint.Owner = sprintEditModel.Owner;\r\n                    sprint.FromDate = sprintEditModel.FromDate;\r\n                    sprint.ToDate = sprintEditModel.ToDate;\r\n                    sprint.Score = sprintEditModel.Score;\r\n                    db.SaveChanges();\r\n                }\r\n                else\r\n                {\r\n                    sprint = new Sprint()\r\n                    {\r\n                        SprintId = GetNextAvailableId(),\r\n                        SprintNo = GetNewSprintNo(sprintEditModel),\r\n                        Description = sprintEditModel.Description,\r\n                        Owner = sprintEditModel.Owner,\r\n                        FromDate = sprintEditModel.FromDate,\r\n                        ToDate = sprintEditModel.ToDate,\r\n                        Status = SStatus.Planning.ToString(),\r\n                        Score = 0,\r\n                        Approved = false,\r\n                        Closed = false\r\n                    };\r\n                    db.Sprint.Add(sprint);\r\n                    db.SaveChanges();\r\n                }\r\n            }\r\n\r\n            return GetSprintById(sprint.SprintId);\r\n        }\r\n\r\n        private static decimal GetNewSprintNo(SprintEditModel sprintEditModel)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                // Max sprint running for an owner if No sprint yet, default = 1\r\n                var sprintNo = db.Sprint\r\n                    .Where(x=>x.Owner==sprintEditModel.Owner)\r\n                    .Select(x => Convert.ToDecimal(x.SprintNo))\r\n                    .DefaultIfEmpty(1)\r\n                    .Max();\r\n\r\n                // sprint with sprintNo.\r\n                var prevSprint = db.Sprint\r\n                    .FirstOrDefault(x => Convert.ToDecimal(x.SprintNo) == sprintNo);\r\n                \r\n                // if prevSprint doesn't exist then return with 1\r\n                if (prevSprint == null)\r\n                {\r\n                    return sprintNo;\r\n                }\r\n\r\n                // [Check]: Condition for main sprint\r\n                // Assign +1 Number.\r\n                if (sprintEditModel.FromDate > prevSprint.ToDate &&\r\n                    sprintEditModel.ToDate.Subtract(sprintEditModel.FromDate).Days>=10)\r\n                {\r\n                    return Math.Truncate(sprintNo) + 1;\r\n                }\r\n                        \r\n                // [Check]: Sprints with conditions other than main sprint are sub sprints\r\n                // Assign +0.1 Number\r\n                return sprintNo + Convert.ToDecimal(0.1);\r\n            }\r\n        }\r\n\r\n        private static string GetNextAvailableId()\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var a = db.Sprint\r\n                    .Select(x => Convert.ToInt32(x.SprintId))\r\n                    .DefaultIfEmpty(0)\r\n                    .Max();\r\n                return Convert.ToString(a + 1);\r\n            }\r\n          \r\n        }\r\n        \r\n        public static void DeleteSprint(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                // Get Selected Profile\r\n                Sprint existingSprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n               // [Check]: Sprint is in planning state \r\n                if (existingSprint != null)\r\n                {\r\n                    if (existingSprint.Status != SStatus.Planning.ToString())\r\n                    {\r\n                        throw new ConstraintException(\"Cannot delete the sprint, status is not planning\");\r\n                    }\r\n                    \r\n                    db.Sprint.Remove(existingSprint);\r\n                    db.SaveChanges();\r\n                    \r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        public static SprintEditModel RequestForApproval(string sprintId, string userId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId && x.Owner == userId);\r\n                \r\n                // [check] : if sprint or user not exist\r\n                if (sprint == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Sprint Id or User Id does not exist\");\r\n                }\r\n\r\n                // [check] : if status is not planning\r\n                if (sprint.Status != SStatus.Planning.ToString())\r\n                {\r\n                    throw new ConstraintException(\"status is not planning, hence request for approval can't be made\");\r\n                }\r\n                \r\n                // [check] : total expected hours of sprint should not be more than 6 hours * working days between sprint\r\n                if (TotalExpectedHours(sprintId) > 6*ValidSprintDays(sprintId))\r\n                {\r\n                    throw new ConstraintException(\"expected hours more then total sprint time\");\r\n                }\r\n\r\n                sprint.Status = SStatus.RequestForApproval.ToString();\r\n                db.SaveChanges();\r\n            }\r\n\r\n            return GetSprintById(sprintId);\r\n        }\r\n\r\n        private static int TotalExpectedHours(string sprintId)\r\n        {\r\n            // calculate total expected hours of all tasks in the sprint\r\n            using (var db = new ErpContext())\r\n            {\r\n                List<Decimal?> expectedHours = db.TaskDetail\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.ExpectedHours)\r\n                    .ToList();\r\n\r\n                return Convert.ToInt32(expectedHours.Sum());\r\n            }\r\n        }\r\n\r\n        private static int ValidSprintDays(string sprintId)\r\n        {\r\n            // Calculate monday to friday working days in sprint\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n\r\n                DateTime to = sprint.ToDate;\r\n                DateTime from = sprint.FromDate;\r\n                \r\n                if (to < from)\r\n                    throw new ArgumentException(\"To cannot be smaller than from.\", nameof(to));\r\n\r\n                int n = 0;\r\n                DateTime nextDate = from;\r\n                while(nextDate <= to.Date)\r\n                {\r\n                    if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)\r\n                        n++;\r\n                    nextDate = nextDate.AddDays(1);\r\n                }\r\n\r\n                return n;\r\n            }\r\n        }\r\n\r\n        public static SprintEditModel ApproveSprint(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                // [check] : validate manager\r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to approve the sprint\");\r\n                }\r\n\r\n                // [check] : if status is valid\r\n                if (sprint.Status != SStatus.RequestForApproval.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint not requested for approval hence can't be approved\");\r\n                }\r\n                \r\n                // Add entries in sprint report before changing status so that error is thrown before approved\r\n                SprintReportManagementService.AddSprintReportLineItem(sprint.SprintId);\r\n                \r\n                sprint.Status = SStatus.Approved.ToString();\r\n                sprint.Approved = true;\r\n                db.SaveChanges();\r\n            }\r\n            \r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public static SprintEditModel RequestForClosure(string sprintId, string userId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId && x.Owner == userId);\r\n\r\n                if (sprint == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Sprint Id or User Id does not exist\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.Approved.ToString())\r\n                {\r\n                    throw new ConstraintException(\"status is not approved, hence request for closure can't be made\");\r\n                }\r\n\r\n                sprint.Status = SStatus.RequestForClosure.ToString();\r\n                db.SaveChanges();\r\n            }\r\n\r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public SprintEditModel CloseSprint(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                if (sprint == null)\r\n                {\r\n                    throw new ConstraintException(\"Sprint Id does not exist\" + sprintId);\r\n                }\r\n                sprint.Score = 0;\r\n                \r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to close the sprint\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.RequestForClosure.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint not requested for closure hence can't be closed\");\r\n                }\r\n\r\n                var taskIds = TaskManagementService.GetTaskIdsForSprint(sprintId);\r\n                \r\n                \r\n                // [Action] - Update Provisional task Score\r\n                // taskIds.ForEach(x =>\r\n                // {\r\n                //     sprint.Score = sprint.Score + TaskManagementService.CalculateTaskScore(x,sprintId);\r\n                // });\r\n\r\n                // Scoring according to scoring Policy\r\n                if (sprint.ScorePolicy != null)\r\n                {\r\n                    sprint.Score = _scoreManagementService.calculateSprintScore(sprintId, (EScorePolicyType) Enum.Parse(typeof(EScorePolicyType), sprint.ScorePolicy,true));\r\n                }\r\n\r\n                sprint.Status = SStatus.Closed.ToString();\r\n                sprint.Closed = true;\r\n                // [Check]: If closed early then Sprint closing date needs to be updated\r\n                sprint.ToDate = DateTime.Today;\r\n                db.SaveChanges();\r\n                // [Action] - remove task link to sprint\r\n                var removedTask = new List<string>();\r\n                try\r\n                {\r\n                    \r\n                    taskIds.ForEach(x =>\r\n                    {\r\n                        TaskManagementService.RemoveTaskFromSprint(x);\r\n                        removedTask.Add(x);\r\n                    });\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    sprint.Status = SStatus.RequestForClosure.ToString();\r\n                    sprint.Closed = false;\r\n                    db.SaveChanges();\r\n                    removedTask.ForEach(x => TaskManagementService.LinkTaskToSprint(x,sprint.SprintId));\r\n                    throw new ConstraintException(e.Message);\r\n                }\r\n                \r\n                \r\n                // Provisional Score Sprint Report\r\n                SprintReportManagementService.UpdateProvisionalScoreInSprintReport(sprintId);\r\n\r\n\r\n            }\r\n            \r\n            return GetSprintById(sprintId);\r\n        }\r\n\r\n        public static SprintEditModel ReviewCompleted(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                if (sprint == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Sprint does not exist: \" + sprintId);\r\n                }\r\n                sprint.Score = 0;\r\n                \r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to review the sprint\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.Closed.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint cannot be reviewed as status is not closed\");\r\n                }\r\n                var taskIds = TaskManagementService.GetTaskIdsForSprint(sprintId);\r\n                \r\n                \r\n                // [Action] - Update Actual task Score\r\n                taskIds.ForEach(x =>\r\n                {\r\n                    sprint.Score = sprint.Score + TaskManagementService.CalculateTaskScore(x,sprintId);\r\n                });\r\n\r\n                sprint.Status = SStatus.Reviewed.ToString();\r\n\r\n                db.SaveChanges();\r\n\r\n\r\n\r\n            }\r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public static SStatus CheckStatus(string sprintId)\r\n        {\r\n            SprintEditModel sprintEditModel = GetSprintById(sprintId);\r\n            return sprintEditModel.Status;\r\n        }\r\n\r\n        public static bool CheckApproved(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var status = db.Sprint\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.Approved)\r\n                    .ToString();\r\n\r\n                if (status==\"true\")\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        public static bool CheckClosed(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var status = db.Sprint\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.Closed)\r\n                    .Single();\r\n\r\n                if (status)\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        public static SprintUnplannedTaskScoreEditModel UpdateScore(string sprintId, string taskId, int hours, string profileId, string include)\r\n        {\r\n            SprintUnplannedTaskScoreEditModel scoreUpdate = new SprintUnplannedTaskScoreEditModel();\r\n            if (include == \"request\")\r\n            {\r\n                scoreUpdate= RequestScore(sprintId, taskId, hours, profileId);\r\n            }\r\n\r\n            if (include == \"approve\")\r\n            {\r\n                scoreUpdate= ApproveScore(sprintId, taskId, hours, profileId);\r\n            }\r\n\r\n            return scoreUpdate;\r\n        }\r\n        \r\n        private static SprintUnplannedTaskScoreEditModel RequestScore(string sprintId,string taskId, int hours, string profileId)\r\n        {\r\n            \r\n                // check if sprint owner indeed is sending request\r\n                List<string> unplanned = new List<string>();\r\n                unplanned.Add(\"unPlannedTask\");\r\n                \r\n                SprintEditModel sprintDb = GetSprintById(sprintId, unplanned );\r\n                \r\n                if (sprintDb.Owner != profileId)\r\n                {\r\n                    throw new ArgumentException(\"Id is not eligible to request for score\");\r\n                }\r\n                \r\n                // check if sprint is not reviewed yet\r\n                if (sprintDb.Status.ToString() == SStatus.Reviewed.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Can't update because sprint review is completed\");\r\n                }\r\n                // check if task belong to sprint\r\n                if (sprintDb.UnPlannedTasks.FirstOrDefault(x => x.TaskId == taskId) == null)\r\n                {\r\n                    throw new ArgumentException(\"Task does not belong to Sprint\"); \r\n                }\r\n                var db = new ErpContext();\r\n                var newUnplanned = new SprintUnplannedTaskScore()\r\n                {\r\n                    Id = GetNextAvailableUnplannedId(),\r\n                    SprintId = sprintId,\r\n                    TaskId = taskId,\r\n                    RequestedHours = hours,\r\n                    ApprovedHours = 0,\r\n                    ScoreStatus = EUnplannedTaskStatus.requested.ToString(),\r\n                    ProfileId = profileId\r\n                };\r\n                db.SprintUnplannedTaskScore.Add(newUnplanned);\r\n                db.SaveChanges();\r\n                 \r\n                // updating task score & hrs\r\n                using (var dbScore = new ErpContext())\r\n                {\r\n                    TaskDetail task = dbScore.TaskDetail.FirstOrDefault(t => t.TaskId == taskId);\r\n                    if (task != null)\r\n                    {\r\n                        task.Score = 0;\r\n                        task.ActualHours = hours;\r\n                    }\r\n                    dbScore.SaveChanges();\r\n                }\r\n                \r\n                return GetUnplannedTaskScoreData(sprintId, taskId);\r\n        }\r\n\r\n        private static SprintUnplannedTaskScoreEditModel ApproveScore(string sprintId, string taskId, int hours, string profileId)\r\n        {\r\n           \r\n                 // check if manager is sending request\r\n                List<string> unplanned = new List<string>();\r\n\r\n                unplanned.Add(\"unPlannedTask\");\r\n                \r\n                SprintEditModel sprintDb = GetSprintById(sprintId, unplanned);\r\n                \r\n                if (!ProfileManagementService.CheckManagerValidity(sprintDb.Owner, profileId))\r\n                {\r\n                    throw new ArgumentException(\"Id is not eligible to approve the score\");\r\n                }\r\n                // check if sprint is not reviewed yet\r\n                if (sprintDb.Status.ToString() == SStatus.Reviewed.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Can't update because sprint review is completed\");\r\n                }\r\n                // check if task belong to sprint\r\n                if (sprintDb.UnPlannedTasks.FirstOrDefault(x => x.TaskId == taskId) == null)\r\n                {\r\n                    throw new ArgumentException(\"Task does not belong to Sprint\"); \r\n                }\r\n                \r\n                //check if score is requested\r\n                \r\n                using (var dbCheck = new ErpContext())\r\n                {\r\n                    SprintUnplannedTaskScore unplannedDb;\r\n                    unplannedDb = dbCheck.SprintUnplannedTaskScore\r\n                        .FirstOrDefault(y => y.TaskId == taskId && y.SprintId == sprintId);\r\n                    // }\r\n\r\n                    if (unplannedDb == null)\r\n                    {\r\n                        throw new ArgumentException(\"Task for sprint does not exist\");\r\n                    }\r\n\r\n                    if (unplannedDb.ScoreStatus != EUnplannedTaskStatus.requested.ToString())\r\n                    {\r\n                        throw new ArgumentException(\"Task score is reviewed or not requested\");\r\n                    }\r\n                    \r\n                    unplannedDb.ScoreStatus = EUnplannedTaskStatus.reviewed.ToString();\r\n                    unplannedDb.ApprovedHours = hours;\r\n                    dbCheck.SaveChanges();\r\n                }\r\n                \r\n                // updating task score & hrs\r\n                using (var dbScore = new ErpContext())\r\n                {\r\n                    TaskDetail task = dbScore.TaskDetail.FirstOrDefault(t => t.TaskId == taskId);\r\n                    if (task != null)\r\n                    {\r\n                        task.Score = Math.Round(Decimal.Divide(hours, 3), 1);\r\n                        task.ActualHours = hours;\r\n                        dbScore.SaveChanges();\r\n                    }\r\n                    \r\n                }\r\n                //  return unplannedTaskData;\r\n\r\n                return GetUnplannedTaskScoreData(sprintId, taskId);\r\n        }\r\n\r\n        private static SprintUnplannedTaskScoreEditModel GetUnplannedTaskScoreData(string sprintId, string taskId)\r\n        {SprintUnplannedTaskScoreEditModel unplannedTaskData = new SprintUnplannedTaskScoreEditModel();\r\n            using (var dbSaved = new ErpContext())\r\n            {\r\n                SprintUnplannedTaskScore unplannedTask = dbSaved.SprintUnplannedTaskScore\r\n                    .FirstOrDefault(y => y.TaskId == taskId && y.SprintId == sprintId);\r\n                unplannedTaskData.Id = unplannedTask.Id;\r\n                unplannedTaskData.SprintId = unplannedTask.SprintId;\r\n                unplannedTaskData.TaskId = unplannedTask.TaskId;\r\n                unplannedTaskData.RequestedHours = unplannedTask.RequestedHours;\r\n                unplannedTaskData.ApprovedHours = unplannedTask.ApprovedHours;\r\n                unplannedTaskData.ProfileId = unplannedTask.ProfileId;\r\n                unplannedTaskData.ScoreStatus =\r\n                    (EUnplannedTaskStatus) Enum.Parse(typeof(EUnplannedTaskStatus), unplannedTask.ScoreStatus, true);\r\n                     \r\n            }\r\n\r\n            return unplannedTaskData;\r\n        }\r\n        \r\n        private static string GetNextAvailableUnplannedId()\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var a = db.SprintUnplannedTaskScore\r\n                    .Select(x => Convert.ToInt32(x.Id))\r\n                    .DefaultIfEmpty(0)\r\n                    .Max();\r\n                return Convert.ToString(a + 1);\r\n            }\r\n          \r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Services/SprintManagementService.cs b/Services/SprintManagementService.cs
--- a/Services/SprintManagementService.cs	(revision ae865ffb5805293a4c2111b77abb1b030e8ae112)
+++ b/Services/SprintManagementService.cs	(date 1671863425503)
@@ -664,24 +664,11 @@
         }
 
         public static SprintUnplannedTaskScoreEditModel UpdateScore(string sprintId, string taskId, int hours, string profileId, string include)
-        {
-            SprintUnplannedTaskScoreEditModel scoreUpdate = new SprintUnplannedTaskScoreEditModel();
+        { 
+            SprintUnplannedTaskScoreEditModel unplannedTaskData = new SprintUnplannedTaskScoreEditModel();
+            var db = new ErpContext();
             if (include == "request")
             {
-                scoreUpdate= RequestScore(sprintId, taskId, hours, profileId);
-            }
-
-            if (include == "approve")
-            {
-                scoreUpdate= ApproveScore(sprintId, taskId, hours, profileId);
-            }
-
-            return scoreUpdate;
-        }
-        
-        private static SprintUnplannedTaskScoreEditModel RequestScore(string sprintId,string taskId, int hours, string profileId)
-        {
-            
                 // check if sprint owner indeed is sending request
                 List<string> unplanned = new List<string>();
                 unplanned.Add("unPlannedTask");
@@ -703,14 +690,14 @@
                 {
                     throw new ArgumentException("Task does not belong to Sprint"); 
                 }
-                var db = new ErpContext();
+                 
                 var newUnplanned = new SprintUnplannedTaskScore()
                 {
                     Id = GetNextAvailableUnplannedId(),
                     SprintId = sprintId,
                     TaskId = taskId,
                     RequestedHours = hours,
-                    ApprovedHours = 0,
+                    ApprovedHours = hours,
                     ScoreStatus = EUnplannedTaskStatus.requested.ToString(),
                     ProfileId = profileId
                 };
@@ -728,14 +715,27 @@
                     }
                     dbScore.SaveChanges();
                 }
-                
-                return GetUnplannedTaskScoreData(sprintId, taskId);
-        }
-
-        private static SprintUnplannedTaskScoreEditModel ApproveScore(string sprintId, string taskId, int hours, string profileId)
-        {
-           
-                 // check if manager is sending request
+                // returning from data base to double check
+                using (var dbSaved = new ErpContext())
+                {
+                    SprintUnplannedTaskScore unplannedDb = dbSaved.SprintUnplannedTaskScore
+                        .FirstOrDefault(y => y.Id == newUnplanned.Id);
+                    unplannedTaskData.Id = unplannedDb.Id;
+                    unplannedTaskData.SprintId = unplannedDb.SprintId;
+                    unplannedTaskData.TaskId = unplannedDb.TaskId;
+                    unplannedTaskData.RequestedHours = unplannedDb.RequestedHours;
+                    unplannedTaskData.ApprovedHours = unplannedDb.ApprovedHours;
+                    unplannedTaskData.ProfileId = unplannedDb.ProfileId;
+                    unplannedTaskData.ScoreStatus =
+                        (EUnplannedTaskStatus) Enum.Parse(typeof(EUnplannedTaskStatus), unplannedDb.ScoreStatus, true);
+                     
+                }
+                 
+                
+            }
+            if (include == "approve")
+            {
+                // check if manager is sending request
                 List<string> unplanned = new List<string>();
 
                 unplanned.Add("unPlannedTask");
@@ -758,10 +758,9 @@
                 }
                 
                 //check if score is requested
-                
+                SprintUnplannedTaskScore unplannedDb;
                 using (var dbCheck = new ErpContext())
                 {
-                    SprintUnplannedTaskScore unplannedDb;
                     unplannedDb = dbCheck.SprintUnplannedTaskScore
                         .FirstOrDefault(y => y.TaskId == taskId && y.SprintId == sprintId);
                     // }
@@ -791,30 +790,29 @@
                         task.ActualHours = hours;
                         dbScore.SaveChanges();
                     }
-                    
-                }
-                //  return unplannedTaskData;
-
-                return GetUnplannedTaskScoreData(sprintId, taskId);
-        }
-
-        private static SprintUnplannedTaskScoreEditModel GetUnplannedTaskScoreData(string sprintId, string taskId)
-        {SprintUnplannedTaskScoreEditModel unplannedTaskData = new SprintUnplannedTaskScoreEditModel();
-            using (var dbSaved = new ErpContext())
-            {
-                SprintUnplannedTaskScore unplannedTask = dbSaved.SprintUnplannedTaskScore
-                    .FirstOrDefault(y => y.TaskId == taskId && y.SprintId == sprintId);
-                unplannedTaskData.Id = unplannedTask.Id;
-                unplannedTaskData.SprintId = unplannedTask.SprintId;
-                unplannedTaskData.TaskId = unplannedTask.TaskId;
-                unplannedTaskData.RequestedHours = unplannedTask.RequestedHours;
-                unplannedTaskData.ApprovedHours = unplannedTask.ApprovedHours;
-                unplannedTaskData.ProfileId = unplannedTask.ProfileId;
-                unplannedTaskData.ScoreStatus =
-                    (EUnplannedTaskStatus) Enum.Parse(typeof(EUnplannedTaskStatus), unplannedTask.ScoreStatus, true);
+
+                 
+                    
+                }
+                
+                // returning from data base to double check
+                using (var dbSaved = new ErpContext())
+                {
+                    SprintUnplannedTaskScore unplannedTask = dbSaved.SprintUnplannedTaskScore
+                        .FirstOrDefault(y => y.TaskId == taskId && y.SprintId == sprintId);
+                    unplannedTaskData.Id = unplannedTask.Id;
+                    unplannedTaskData.SprintId = unplannedTask.SprintId;
+                    unplannedTaskData.TaskId = unplannedTask.TaskId;
+                    unplannedTaskData.RequestedHours = unplannedTask.RequestedHours;
+                    unplannedTaskData.ApprovedHours = unplannedTask.ApprovedHours;
+                    unplannedTaskData.ProfileId = unplannedTask.ProfileId;
+                    unplannedTaskData.ScoreStatus =
+                        (EUnplannedTaskStatus) Enum.Parse(typeof(EUnplannedTaskStatus), unplannedTask.ScoreStatus, true);
                      
-            }
+                }
 
+            }
+           
             return unplannedTaskData;
         }
         
@@ -830,6 +828,5 @@
             }
           
         }
-
     }
 }
Index: Controller/RegisterTimeStampController.cs
===================================================================
diff --git a/Controller/RegisterTimeStampController.cs b/Controller/RegisterTimeStampController.cs
deleted file mode 100644
--- a/Controller/RegisterTimeStampController.cs	(revision ae865ffb5805293a4c2111b77abb1b030e8ae112)
+++ /dev/null	(revision ae865ffb5805293a4c2111b77abb1b030e8ae112)
@@ -1,99 +0,0 @@
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Threading.Tasks;
-using flexli_erp_webapi.EditModels;
-using flexli_erp_webapi.Services;
-using flexli_erp_webapi.DataModels;
-using Microsoft.AspNetCore.Mvc;
-using flexli_erp_webapi.Models;
-using Microsoft.AspNetCore.Cors;
-using Microsoft.EntityFrameworkCore;
-
-
-namespace flexli_erp_webapi.Controller
-{
-    [Route("api/v1/[controller]")]
-    [ApiController]
-    [ApiVersion("1.0")]
-    [EnableCors("AllowOrigin")]
-    [Produces("application/json")]
-
-    public class RegisterTimeStampController : ControllerBase
-    {
-        [HttpGet("GetStamp")]
-        [Consumes("application/json")]
-
-        public RegisterTimeStamp GetStamp([FromQuery] string stampId)
-        {
-            using (var db = new ErpContext())
-            {
-
-                RegisterTimeStamp existingTimeStamp = db.RegisterTimeStamp
-                    .FirstOrDefault(x => x.StampId == stampId);
-                // Get Selected TasK
-                RegisterTimeStamp timeStampModel = new RegisterTimeStamp()
-                {
-                    StampId = existingTimeStamp.StampId,
-                    Stamp = existingTimeStamp.Stamp
-                };
-
-                return timeStampModel;
-
-            }
-        }
-
-        [HttpPost("AddStamp")]
-        [Consumes("application/json")]
-
-        public RegisterTimeStamp AddStamp([FromQuery] DateTime stamp)
-        {
-            string id = GetNextAvailableId();
-            
-            using (var db = new ErpContext())
-            {
-                RegisterTimeStamp registerTimeStamp = new RegisterTimeStamp()
-                {
-                    StampId = id,
-                    Stamp = stamp
-                };
-                db.RegisterTimeStamp.Add(registerTimeStamp);
-                db.SaveChanges();
-            }
-
-            return GetStamp(id);
-        }
-
-        [HttpDelete("DeleteStamp")]
-        [Consumes("application/json")]
-        public void DeleteStamp(string stampId)
-        {
-            using (var db = new ErpContext())
-            {
-                RegisterTimeStamp existingTimeStamp = db.RegisterTimeStamp
-                    .FirstOrDefault(x => x.StampId == stampId);
-
-                if (existingTimeStamp != null)
-                {
-
-                    db.RegisterTimeStamp.Remove(existingTimeStamp);
-                    db.SaveChanges();
-                }
-            }
-        }
-        
-        
-        private static string GetNextAvailableId()
-        {
-            using (var db = new ErpContext())
-            {
-                var a = db.RegisterTimeStamp
-                    .Select(x => Convert.ToInt32(x.StampId))
-                    .DefaultIfEmpty(0)
-                    .Max();
-                return Convert.ToString(a + 1);
-            }
-        }
-
-    }
-}
\ No newline at end of file
Index: Models/DataModels/RegisterTimeStamp.cs
===================================================================
diff --git a/Models/DataModels/RegisterTimeStamp.cs b/Models/DataModels/RegisterTimeStamp.cs
deleted file mode 100644
--- a/Models/DataModels/RegisterTimeStamp.cs	(revision ae865ffb5805293a4c2111b77abb1b030e8ae112)
+++ /dev/null	(revision ae865ffb5805293a4c2111b77abb1b030e8ae112)
@@ -1,17 +0,0 @@
-using System;
-using System.ComponentModel.DataAnnotations;
-using System.ComponentModel.DataAnnotations.Schema;
-
-namespace flexli_erp_webapi.DataModels
-{
-    [Table("exp_table")]
-    public class RegisterTimeStamp
-    {
-        [Key] [Column("stamp_id")]
-        public string StampId { get; set; }
-
-        [Column("stamp")]
-        public DateTime? Stamp { get; set; }
-        
-    }
-}
\ No newline at end of file
Index: ErpContext.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using flexli_erp_webapi.DataModels;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing JetBrains.Annotations;\r\nusing Microsoft.Extensions.Logging;\r\n\r\n\r\nnamespace flexli_erp_webapi\r\n{\r\n    public class ErpContext:DbContext\r\n    {\r\n        public DbSet<TaskDetail> TaskDetail { get; set; }\r\n        \r\n        public DbSet<CheckList> CheckList { get; set; }\r\n        \r\n        public DbSet<Dependency> Dependency { get; set; }\r\n        \r\n        public DbSet<Profile> Profile { get; set; }\r\n        \r\n        public DbSet<ProfileManager> ProfileManager { get; set; }\r\n\r\n        public DbSet<Sprint> Sprint { get; set; }\r\n        \r\n        public DbSet<SprintReport> SprintReport { get; set; }\r\n\r\n        public DbSet<TaskSchedule> TaskSchedule { get; set; }\r\n        \r\n        public DbSet<TaskSummary> TaskSummary { get; set; }\r\n        \r\n        public DbSet<Comment> Comment { get; set; }\r\n        \r\n        public DbSet<TaskHierarchy> TaskHierarchy { get; set; }\r\n        \r\n        public DbSet<Template> Template { get; set; }\r\n        \r\n        public DbSet<SprintUnplannedTaskScore> SprintUnplannedTaskScore { get; set; }\r\n        \r\n        public DbSet<TemplateRelation> TemplateRelation { get; set; }\r\n        \r\n        public DbSet<RegisterTimeStamp> RegisterTimeStamp { get; set; }\r\n\r\n        // for logging sql queries\r\n        private static readonly ILoggerFactory LoggerFactory  = new LoggerFactory().AddConsole((_,___) => true);\r\n\r\n        private static string _connString = \"\"; // updated in Constructor\r\n\r\n        /// <summary>\r\n        /// Initialise Connection\r\n        /// </summary>        \r\n        public static void SetConnectionString(string defaultConnectionString)\r\n        {\r\n            _connString = defaultConnectionString;\r\n        }\r\n        \r\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n            => optionsBuilder\r\n                .UseLoggerFactory(LoggerFactory) //tie-up DbContext with LoggerFactory object\r\n                .EnableSensitiveDataLogging()\r\n                .UseNpgsql(_connString); // updated in Constructor\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            // composite key for lineItems table\r\n           // modelBuilder.Entity<StoreOrderLineItem>()\r\n             //   .HasKey(lineItem => new { storeOrderId = lineItem.StoreOrderId, skuCode = lineItem.SkuCode });\r\n\r\n             \r\n            \r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ErpContext.cs b/ErpContext.cs
--- a/ErpContext.cs	(revision ae865ffb5805293a4c2111b77abb1b030e8ae112)
+++ b/ErpContext.cs	(date 1671863400450)
@@ -35,8 +35,6 @@
         public DbSet<SprintUnplannedTaskScore> SprintUnplannedTaskScore { get; set; }
         
         public DbSet<TemplateRelation> TemplateRelation { get; set; }
-        
-        public DbSet<RegisterTimeStamp> RegisterTimeStamp { get; set; }
 
         // for logging sql queries
         private static readonly ILoggerFactory LoggerFactory  = new LoggerFactory().AddConsole((_,___) => true);
Index: flexli-erp-webapi.sln.DotSettings.user
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\r\n\t<s:String x:Key=\"/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=62ee6a4a_002Ddaa4_002D49f8_002Dadba_002Dc116edd9545b/@EntryIndexedValue\">&lt;SessionState ContinuousTestingMode=\"0\" IsActive=\"True\" Name=\"CreateAndReadCheckListItem\" xmlns=\"urn:schemas-jetbrains-com:jetbrains-ut-session\"&gt;\r\n  &lt;Or&gt;\r\n    &lt;And&gt;\r\n      &lt;Or&gt;\r\n        &lt;And&gt;\r\n          &lt;TestAncestor&gt;\r\n            &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest&lt;/TestId&gt;\r\n          &lt;/TestAncestor&gt;\r\n          &lt;Not&gt;\r\n            &lt;And&gt;\r\n              &lt;TestAncestor&gt;\r\n                &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;\r\n              &lt;/TestAncestor&gt;\r\n              &lt;Project Location=\"E:\\Flexli\\erp-webapi\\api-unit-testing\" Presentation=\"&amp;lt;api-unit-testing&amp;gt;\" /&gt;\r\n              &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;\r\n            &lt;/And&gt;\r\n          &lt;/Not&gt;\r\n        &lt;/And&gt;\r\n        &lt;TestAncestor&gt;\r\n          &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;\r\n        &lt;/TestAncestor&gt;\r\n      &lt;/Or&gt;\r\n      &lt;Not&gt;\r\n        &lt;Or&gt;\r\n          &lt;And&gt;\r\n            &lt;TestAncestor&gt;\r\n              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;\r\n            &lt;/TestAncestor&gt;\r\n            &lt;Project Location=\"E:\\Flexli\\erp-webapi\\api-unit-testing\" Presentation=\"&amp;lt;api-unit-testing&amp;gt;\" /&gt;\r\n            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;\r\n          &lt;/And&gt;\r\n          &lt;And&gt;\r\n            &lt;TestAncestor&gt;\r\n              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeNotContainsItems_whenGetCheckListCalled_expectedException&lt;/TestId&gt;\r\n            &lt;/TestAncestor&gt;\r\n            &lt;Project Location=\"E:\\Flexli\\erp-webapi\\api-unit-testing\" Presentation=\"&amp;lt;api-unit-testing&amp;gt;\" /&gt;\r\n            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;\r\n          &lt;/And&gt;\r\n          &lt;And&gt;\r\n            &lt;TestAncestor&gt;\r\n              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenInvalidTaskId_whenGetCheckListCalled_expectedNull&lt;/TestId&gt;\r\n            &lt;/TestAncestor&gt;\r\n            &lt;Project Location=\"E:\\Flexli\\erp-webapi\\api-unit-testing\" Presentation=\"&amp;lt;api-unit-testing&amp;gt;\" /&gt;\r\n            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;\r\n          &lt;/And&gt;\r\n          &lt;And&gt;\r\n            &lt;TestAncestor&gt;\r\n              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedOrUpdatedCheckList_expectCorrectCreationOrUpdation&lt;/TestId&gt;\r\n            &lt;/TestAncestor&gt;\r\n            &lt;Project Location=\"E:\\Flexli\\erp-webapi\\api-unit-testing\" Presentation=\"&amp;lt;api-unit-testing&amp;gt;\" /&gt;\r\n            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;\r\n          &lt;/And&gt;\r\n          &lt;And&gt;\r\n            &lt;TestAncestor&gt;\r\n              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedCheckListWithInvalidTaskId_expectedException&lt;/TestId&gt;\r\n            &lt;/TestAncestor&gt;\r\n            &lt;Project Location=\"E:\\Flexli\\erp-webapi\\api-unit-testing\" Presentation=\"&amp;lt;api-unit-testing&amp;gt;\" /&gt;\r\n            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;\r\n          &lt;/And&gt;\r\n          &lt;And&gt;\r\n            &lt;TestAncestor&gt;\r\n              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenDeleteCheckListItemCalled_expectSuccessAndNoException&lt;/TestId&gt;\r\n            &lt;/TestAncestor&gt;\r\n            &lt;Project Location=\"E:\\Flexli\\erp-webapi\\api-unit-testing\" Presentation=\"&amp;lt;api-unit-testing&amp;gt;\" /&gt;\r\n            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;\r\n          &lt;/And&gt;\r\n        &lt;/Or&gt;\r\n      &lt;/Not&gt;\r\n    &lt;/And&gt;\r\n    &lt;TestAncestor&gt;\r\n      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenInvalidTaskId_whenGetCheckListCalled_expectedNull&lt;/TestId&gt;\r\n      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;\r\n      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeNotContainsItems_whenGetCheckListCalled_expectedException&lt;/TestId&gt;\r\n      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedOrUpdatedCheckList_expectCorrectCreationOrUpdation&lt;/TestId&gt;\r\n      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenDeleteCheckListItemCalled_expectSuccessAndNoException&lt;/TestId&gt;\r\n      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedCheckListWithInvalidTaskId_expectedException&lt;/TestId&gt;\r\n    &lt;/TestAncestor&gt;\r\n  &lt;/Or&gt;\r\n&lt;/SessionState&gt;</s:String>\r\n\t\r\n\t</wpf:ResourceDictionary>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flexli-erp-webapi.sln.DotSettings.user b/flexli-erp-webapi.sln.DotSettings.user
--- a/flexli-erp-webapi.sln.DotSettings.user	(revision ae865ffb5805293a4c2111b77abb1b030e8ae112)
+++ b/flexli-erp-webapi.sln.DotSettings.user	(date 1671863400471)
@@ -1,82 +1,82 @@
 <wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
-	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=62ee6a4a_002Ddaa4_002D49f8_002Dadba_002Dc116edd9545b/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" IsActive="True" Name="CreateAndReadCheckListItem" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;
-  &lt;Or&gt;
-    &lt;And&gt;
-      &lt;Or&gt;
-        &lt;And&gt;
-          &lt;TestAncestor&gt;
-            &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest&lt;/TestId&gt;
-          &lt;/TestAncestor&gt;
-          &lt;Not&gt;
-            &lt;And&gt;
-              &lt;TestAncestor&gt;
-                &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;
-              &lt;/TestAncestor&gt;
-              &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;
-              &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;
-            &lt;/And&gt;
-          &lt;/Not&gt;
-        &lt;/And&gt;
-        &lt;TestAncestor&gt;
-          &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;
-        &lt;/TestAncestor&gt;
-      &lt;/Or&gt;
-      &lt;Not&gt;
-        &lt;Or&gt;
-          &lt;And&gt;
-            &lt;TestAncestor&gt;
-              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;
-            &lt;/TestAncestor&gt;
-            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;
-            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;
-          &lt;/And&gt;
-          &lt;And&gt;
-            &lt;TestAncestor&gt;
-              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeNotContainsItems_whenGetCheckListCalled_expectedException&lt;/TestId&gt;
-            &lt;/TestAncestor&gt;
-            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;
-            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;
-          &lt;/And&gt;
-          &lt;And&gt;
-            &lt;TestAncestor&gt;
-              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenInvalidTaskId_whenGetCheckListCalled_expectedNull&lt;/TestId&gt;
-            &lt;/TestAncestor&gt;
-            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;
-            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;
-          &lt;/And&gt;
-          &lt;And&gt;
-            &lt;TestAncestor&gt;
-              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedOrUpdatedCheckList_expectCorrectCreationOrUpdation&lt;/TestId&gt;
-            &lt;/TestAncestor&gt;
-            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;
-            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;
-          &lt;/And&gt;
-          &lt;And&gt;
-            &lt;TestAncestor&gt;
-              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedCheckListWithInvalidTaskId_expectedException&lt;/TestId&gt;
-            &lt;/TestAncestor&gt;
-            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;
-            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;
-          &lt;/And&gt;
-          &lt;And&gt;
-            &lt;TestAncestor&gt;
-              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenDeleteCheckListItemCalled_expectSuccessAndNoException&lt;/TestId&gt;
-            &lt;/TestAncestor&gt;
-            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;
-            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;
-          &lt;/And&gt;
-        &lt;/Or&gt;
-      &lt;/Not&gt;
-    &lt;/And&gt;
-    &lt;TestAncestor&gt;
-      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenInvalidTaskId_whenGetCheckListCalled_expectedNull&lt;/TestId&gt;
-      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;
-      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeNotContainsItems_whenGetCheckListCalled_expectedException&lt;/TestId&gt;
-      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedOrUpdatedCheckList_expectCorrectCreationOrUpdation&lt;/TestId&gt;
-      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenDeleteCheckListItemCalled_expectSuccessAndNoException&lt;/TestId&gt;
-      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedCheckListWithInvalidTaskId_expectedException&lt;/TestId&gt;
-    &lt;/TestAncestor&gt;
-  &lt;/Or&gt;
+	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=62ee6a4a_002Ddaa4_002D49f8_002Dadba_002Dc116edd9545b/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" IsActive="True" Name="CreateAndReadCheckListItem" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;&#xD;
+  &lt;Or&gt;&#xD;
+    &lt;And&gt;&#xD;
+      &lt;Or&gt;&#xD;
+        &lt;And&gt;&#xD;
+          &lt;TestAncestor&gt;&#xD;
+            &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest&lt;/TestId&gt;&#xD;
+          &lt;/TestAncestor&gt;&#xD;
+          &lt;Not&gt;&#xD;
+            &lt;And&gt;&#xD;
+              &lt;TestAncestor&gt;&#xD;
+                &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;&#xD;
+              &lt;/TestAncestor&gt;&#xD;
+              &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;&#xD;
+              &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;&#xD;
+            &lt;/And&gt;&#xD;
+          &lt;/Not&gt;&#xD;
+        &lt;/And&gt;&#xD;
+        &lt;TestAncestor&gt;&#xD;
+          &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;&#xD;
+        &lt;/TestAncestor&gt;&#xD;
+      &lt;/Or&gt;&#xD;
+      &lt;Not&gt;&#xD;
+        &lt;Or&gt;&#xD;
+          &lt;And&gt;&#xD;
+            &lt;TestAncestor&gt;&#xD;
+              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;&#xD;
+            &lt;/TestAncestor&gt;&#xD;
+            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;&#xD;
+            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;&#xD;
+          &lt;/And&gt;&#xD;
+          &lt;And&gt;&#xD;
+            &lt;TestAncestor&gt;&#xD;
+              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeNotContainsItems_whenGetCheckListCalled_expectedException&lt;/TestId&gt;&#xD;
+            &lt;/TestAncestor&gt;&#xD;
+            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;&#xD;
+            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;&#xD;
+          &lt;/And&gt;&#xD;
+          &lt;And&gt;&#xD;
+            &lt;TestAncestor&gt;&#xD;
+              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenInvalidTaskId_whenGetCheckListCalled_expectedNull&lt;/TestId&gt;&#xD;
+            &lt;/TestAncestor&gt;&#xD;
+            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;&#xD;
+            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;&#xD;
+          &lt;/And&gt;&#xD;
+          &lt;And&gt;&#xD;
+            &lt;TestAncestor&gt;&#xD;
+              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedOrUpdatedCheckList_expectCorrectCreationOrUpdation&lt;/TestId&gt;&#xD;
+            &lt;/TestAncestor&gt;&#xD;
+            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;&#xD;
+            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;&#xD;
+          &lt;/And&gt;&#xD;
+          &lt;And&gt;&#xD;
+            &lt;TestAncestor&gt;&#xD;
+              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedCheckListWithInvalidTaskId_expectedException&lt;/TestId&gt;&#xD;
+            &lt;/TestAncestor&gt;&#xD;
+            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;&#xD;
+            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;&#xD;
+          &lt;/And&gt;&#xD;
+          &lt;And&gt;&#xD;
+            &lt;TestAncestor&gt;&#xD;
+              &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenDeleteCheckListItemCalled_expectSuccessAndNoException&lt;/TestId&gt;&#xD;
+            &lt;/TestAncestor&gt;&#xD;
+            &lt;Project Location="E:\Flexli\erp-webapi\api-unit-testing" Presentation="&amp;lt;api-unit-testing&amp;gt;" /&gt;&#xD;
+            &lt;Namespace&gt;api_unit_testing&lt;/Namespace&gt;&#xD;
+          &lt;/And&gt;&#xD;
+        &lt;/Or&gt;&#xD;
+      &lt;/Not&gt;&#xD;
+    &lt;/And&gt;&#xD;
+    &lt;TestAncestor&gt;&#xD;
+      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenInvalidTaskId_whenGetCheckListCalled_expectedNull&lt;/TestId&gt;&#xD;
+      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeContainItems_whenGetCheckListCalled_expectedNotNull&lt;/TestId&gt;&#xD;
+      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.givenExistingTaskIdAndIncludeNotContainsItems_whenGetCheckListCalled_expectedException&lt;/TestId&gt;&#xD;
+      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedOrUpdatedCheckList_expectCorrectCreationOrUpdation&lt;/TestId&gt;&#xD;
+      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenDeleteCheckListItemCalled_expectSuccessAndNoException&lt;/TestId&gt;&#xD;
+      &lt;TestId&gt;xUnit::22263D29-C18B-44C2-8A0F-865947F905D6::.NETCoreApp,Version=v2.1::api_unit_testing.CheckListItemControllerTest.whenCreatedCheckListWithInvalidTaskId_expectedException&lt;/TestId&gt;&#xD;
+    &lt;/TestAncestor&gt;&#xD;
+  &lt;/Or&gt;&#xD;
 &lt;/SessionState&gt;</s:String>
 	
 	</wpf:ResourceDictionary>
\ No newline at end of file
