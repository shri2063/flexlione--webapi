Index: Services/SprintManagementService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing flexli_erp_webapi.DataModels;\r\nusing flexli_erp_webapi.EditModels;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace flexli_erp_webapi.Services\r\n{\r\n    public class SprintManagementService\r\n    {\r\n        \r\n        public static List<SprintEditModel> GetSprintsByProfileId(string profileId, string include = null)\r\n        {\r\n            List<string> sprintIds = GetSprintIdsForProfileId(profileId);\r\n            List<SprintEditModel> sprints = new List<SprintEditModel>();\r\n            \r\n           sprintIds.ForEach(x =>\r\n           {\r\n              sprints.Add(GetSprintById(x)); \r\n           });\r\n\r\n           return sprints;\r\n\r\n        }\r\n        \r\n        public static SprintEditModel GetSprintById(string sprintId, string include = null)\r\n        {\r\n            SprintEditModel sprint =  GetSprintByIdFromDb(sprintId);\r\n            if (sprint == null)\r\n            {\r\n                return null;\r\n            }\r\n            sprint.Tasks = new List<TaskDetailEditModel>();\r\n            if (include == \"task\")\r\n            {\r\n                using (var db = new ErpContext())\r\n                {\r\n                    List<string> taskDetailIds = db.TaskDetail\r\n                        .Where(x => x.SprintId == sprintId)\r\n                        .Select(x => x.TaskId)\r\n                        .ToList();\r\n                    taskDetailIds.ForEach(x =>\r\n                        sprint.Tasks.Add(TaskManagementService.GetTaskById(x)));\r\n                    \r\n                }\r\n            }\r\n\r\n            return sprint;\r\n        }\r\n\r\n        private static List<string> GetSprintIdsForProfileId(string profileId, string include = null)\r\n        {\r\n            List<string> sprintIds = new List<string>();\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprintIds = db.Sprint\r\n                    .Where(x => x.Owner == profileId)\r\n                    .Select(x => x.SprintId)\r\n                    .ToList();\r\n            }\r\n\r\n            return sprintIds;\r\n\r\n        }\r\n        \r\n        \r\n        \r\n        public static SprintEditModel AddOrUpdateSprint(SprintEditModel sprintEditModel)\r\n        {\r\n            // [Check]: Previous all sprints closed in case of new sprint\r\n            if (GetSprintById(sprintEditModel.SprintId) == null)\r\n            {\r\n                List<SprintEditModel> sprints = GetSprintsByProfileId(sprintEditModel.Owner);\r\n\r\n                if (sprints.Count > 0)\r\n                {\r\n                    var openSprints = sprints.FindAll(x => (!x.Closed))\r\n                        .Count;\r\n                    if (openSprints > 0)\r\n                    {\r\n                        throw new ConstraintException(\"All Previous sprints need to be closed\");\r\n                    }\r\n                }\r\n\r\n            }\r\n              \r\n            \r\n            \r\n            // [Check]: Sprint is in planning state in case of already created sprint\r\n\r\n            if (GetSprintById(sprintEditModel.SprintId) != null)\r\n            {\r\n              if(GetSprintById(sprintEditModel.SprintId).Status != SStatus.Planning)\r\n                  \r\n                throw new ConstraintException(\"Sprint  can be updated only in planning stage \");\r\n            }\r\n            \r\n            return AddOrUpdateSprintInDb(sprintEditModel);\r\n\r\n        }\r\n        \r\n       \r\n        \r\n        private static SprintEditModel GetSprintByIdFromDb (string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                \r\n                Sprint existingSprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                // [Check]: Sprint does not exist\r\n                if (existingSprint == null)\r\n                {\r\n                    return null;\r\n                }\r\n                    \r\n                \r\n               \r\n\r\n                SprintEditModel sprintEditModel = new SprintEditModel()\r\n                {\r\n                   SprintId = existingSprint.SprintId,\r\n                   Description = existingSprint.Description,\r\n                   Owner = existingSprint.Owner,\r\n                   FromDate = existingSprint.FromDate,\r\n                   ToDate = existingSprint.ToDate,\r\n                   Score = existingSprint.Score,\r\n                   Status = (SStatus) Enum.Parse(typeof(SStatus), existingSprint.Status, true),\r\n                   Approved = existingSprint.Approved,\r\n                   Closed = existingSprint.Closed,\r\n                   SprintNo = existingSprint.SprintNo\r\n                };\r\n\r\n                return sprintEditModel;\r\n            }\r\n\r\n        }\r\n        \r\n        private static SprintEditModel AddOrUpdateSprintInDb(SprintEditModel sprintEditModel)\r\n        {\r\n            Sprint sprint;\r\n            \r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintEditModel.SprintId);\r\n\r\n\r\n                if (sprint != null) // update\r\n                {\r\n                    sprint.Description = sprintEditModel.Description;\r\n                    sprint.SprintNo = sprintEditModel.SprintNo;\r\n                    sprint.Owner = sprintEditModel.Owner;\r\n                    sprint.FromDate = sprintEditModel.FromDate;\r\n                    sprint.ToDate = sprintEditModel.ToDate;\r\n                    sprint.Score = sprintEditModel.Score;\r\n                    db.SaveChanges();\r\n                }\r\n                else\r\n                {\r\n                    sprint = new Sprint()\r\n                    {\r\n                        SprintId = GetNextAvailableId(),\r\n                        SprintNo = 0,\r\n                        Description = sprintEditModel.Description,\r\n                        Owner = sprintEditModel.Owner,\r\n                        FromDate = sprintEditModel.FromDate,\r\n                        ToDate = sprintEditModel.ToDate,\r\n                        Status = SStatus.Planning.ToString(),\r\n                        Score = 0,\r\n                        Approved = false,\r\n                        Closed = false\r\n                    };\r\n                    db.Sprint.Add(sprint);\r\n                    db.SaveChanges();\r\n                }\r\n            }\r\n\r\n            return GetSprintById(sprint.SprintId);\r\n        }\r\n\r\n        private static string GetNextAvailableId()\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var a = db.Sprint\r\n                    .Select(x => Convert.ToInt32(x.SprintId))\r\n                    .DefaultIfEmpty(0)\r\n                    .Max();\r\n                return Convert.ToString(a + 1);\r\n            }\r\n          \r\n        }\r\n        \r\n        public static void DeleteSprint(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                // Get Selected Profile\r\n                Sprint existingSprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                if (existingSprint != null)\r\n                {\r\n                    if (existingSprint.Status != SStatus.Planning.ToString())\r\n                    {\r\n                        throw new ConstraintException(\"Cannot delete the sprint, status is not planning\");\r\n                    }\r\n                    \r\n                    db.Sprint.Remove(existingSprint);\r\n                    db.SaveChanges();\r\n                    \r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        public static SprintEditModel RequestForApproval(string sprintId, string userId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId && x.Owner == userId);\r\n\r\n                if (sprint == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Sprint Id or User Id does not exist\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.Planning.ToString())\r\n                {\r\n                    throw new ConstraintException(\"status is not planning, hence request for approval can't be made\");\r\n                }\r\n                \r\n                if (TotalExpectedHours(sprintId) > 6*ValidSprintDays(sprintId))\r\n                {\r\n                    throw new ConstraintException(\"expected hours more then total sprint time\");\r\n                }\r\n\r\n                sprint.Status = SStatus.RequestForApproval.ToString();\r\n                db.SaveChanges();\r\n            }\r\n\r\n            return GetSprintById(sprintId);\r\n        }\r\n\r\n        private static int TotalExpectedHours(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                List<Decimal?> expectedHours = db.TaskDetail\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.ExpectedHours)\r\n                    .ToList();\r\n\r\n                return Convert.ToInt32(expectedHours.Sum());\r\n            }\r\n        }\r\n\r\n        private static int ValidSprintDays(string sprintId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n\r\n                DateTime to = sprint.ToDate;\r\n                DateTime from = sprint.FromDate;\r\n                \r\n                if (to < from)\r\n                    throw new ArgumentException(\"To cannot be smaller than from.\", nameof(to));\r\n\r\n                int n = 0;\r\n                DateTime nextDate = from;\r\n                while(nextDate <= to.Date)\r\n                {\r\n                    if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)\r\n                        n++;\r\n                    nextDate = nextDate.AddDays(1);\r\n                }\r\n\r\n                return n;\r\n            }\r\n        }\r\n\r\n        public static SprintEditModel ApproveSprint(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to approve the sprint\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.RequestForApproval.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint not requested for approval hence can't be approved\");\r\n                }\r\n\r\n                sprint.Status = SStatus.Approved.ToString();\r\n                sprint.Approved = true;\r\n                db.SaveChanges();\r\n\r\n                SprintReportManagementService.AddSprintReportLineItem(sprint.SprintId);\r\n            }\r\n            \r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public static SprintEditModel RequestForClosure(string sprintId, string userId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId && x.Owner == userId);\r\n\r\n                if (sprint == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Sprint Id or User Id does not exist\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.Approved.ToString())\r\n                {\r\n                    throw new ConstraintException(\"status is not approved, hence request for closure can't be made\");\r\n                }\r\n\r\n                sprint.Status = SStatus.RequestForClosure.ToString();\r\n                db.SaveChanges();\r\n            }\r\n\r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public static SprintEditModel CloseSprint(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to close the sprint\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.RequestForClosure.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint not requested for closure hence can't be closed\");\r\n                }\r\n\r\n                sprint.Status = SStatus.Closed.ToString();\r\n                sprint.Closed = true;\r\n                \r\n                // Provisional score of task\r\n                // TaskManagementService.UpdateProvisionalTaskScore(sprintId);\r\n                //\r\n                // List<int?> taskScores = db.TaskDetail\r\n                //     .Where(x => x.SprintId == sprintId)\r\n                //     .Select(x => x.Score)\r\n                //     .ToList();\r\n                //\r\n                // // Provisional score of sprint\r\n                // sprint.Score = taskScores.Sum();\r\n                \r\n                db.SaveChanges();\r\n                \r\n                // Unlinking tasks from sprint\r\n                List<string> tasks = db.TaskDetail\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.TaskId)\r\n                    .ToList();\r\n                \r\n                tasks.ForEach(x =>\r\n                {\r\n                    TaskManagementService.RemoveTaskFromSprint(x);\r\n                });\r\n\r\n            }\r\n            \r\n            return GetSprintById(sprintId);\r\n        }\r\n\r\n        public static SprintEditModel ReviewCompleted(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to review the sprint\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.Closed.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint cannot be reviewed as status is not closed\");\r\n                }\r\n\r\n                if (!SprintReportManagementService.AllSprintReportLineItemsStatusNotNoChange(sprintId))\r\n                {\r\n                    throw new ConstraintException(\"Sprint report line items have status no change\");\r\n                }\r\n\r\n                sprint.Status = SStatus.Reviewed.ToString();\r\n                db.SaveChanges();\r\n\r\n                // SprintReportManagementService.PublishActualScores(sprintId);\r\n\r\n            }\r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public static SStatus CheckStatus(string sprintId)\r\n        {\r\n            SprintEditModel sprintEditModel = GetSprintById(sprintId);\r\n            return sprintEditModel.Status;\r\n        }\r\n\r\n        public static bool CheckApproved(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var status = db.Sprint\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.Approved)\r\n                    .ToString();\r\n\r\n                if (status==\"true\")\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        public static bool CheckClosed(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var status = db.Sprint\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.Closed)\r\n                    .Single();\r\n\r\n                if (status)\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Services/SprintManagementService.cs b/Services/SprintManagementService.cs
--- a/Services/SprintManagementService.cs	
+++ b/Services/SprintManagementService.cs	
@@ -364,28 +364,32 @@
                 sprint.Closed = true;
                 
                 // Provisional score of task
-                // TaskManagementService.UpdateProvisionalTaskScore(sprintId);
-                //
-                // List<int?> taskScores = db.TaskDetail
-                //     .Where(x => x.SprintId == sprintId)
-                //     .Select(x => x.Score)
-                //     .ToList();
-                //
-                // // Provisional score of sprint
-                // sprint.Score = taskScores.Sum();
-                
-                db.SaveChanges();
-                
-                // Unlinking tasks from sprint
-                List<string> tasks = db.TaskDetail
+
+                List<string> taskIds = db.TaskDetail
                     .Where(x => x.SprintId == sprintId)
                     .Select(x => x.TaskId)
                     .ToList();
                 
-                tasks.ForEach(x =>
+                taskIds.ForEach(x=>TaskManagementService.UpdateProvisionalTaskScore(x));
+                
+                List<int?> taskScores = db.TaskDetail
+                    .Where(x => x.SprintId == sprintId)
+                    .Select(x => x.Score)
+                    .ToList();
+                
+                // Provisional score of sprint
+                sprint.Score = taskScores.Sum();
+                
+                db.SaveChanges();
+                
+                // Unlinking tasks from sprint
+                taskIds.ForEach(x =>
                 {
                     TaskManagementService.RemoveTaskFromSprint(x);
                 });
+                
+                // Provisional Score for checklist
+                taskIds.ForEach(x=>SprintReportManagementService.UpdateProvisionalChecklistScore(x));
 
             }
             
@@ -416,10 +420,28 @@
                 }
 
                 sprint.Status = SStatus.Reviewed.ToString();
+                
+
+                List<string> taskIds = db.SprintReport
+                    .Where(x => x.SprintId == sprintId)
+                    .Select(x => x.TaskId)
+                    .ToList();
+
+                // update actual score in sprint report
+                SprintReportManagementService.PublishActualSprintReportScores(sprintId);
+                
+                // update actual score of task
+                taskIds.ForEach(x=>TaskManagementService.UpdateActualScore(x));
+                
+                List<int?> taskScores = db.TaskDetail
+                    .Where(x => x.SprintId == sprintId)
+                    .Select(x => x.Score)
+                    .ToList();
+                
+                // Actual score of sprint
+                sprint.Score = taskScores.Sum();
+                
                 db.SaveChanges();
-
-                // SprintReportManagementService.PublishActualScores(sprintId);
-
             }
             return GetSprintById(sprintId);
         }
