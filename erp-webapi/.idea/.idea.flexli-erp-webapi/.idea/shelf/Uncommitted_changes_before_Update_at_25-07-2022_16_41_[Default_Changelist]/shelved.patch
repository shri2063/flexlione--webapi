Index: Models/EditModels/ProfileEditModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\n\r\nnamespace flexli_erp_webapi.EditModels\r\n{\r\n    public class ProfileEditModel\r\n    {\r\n        public string ProfileId { get; set; }\r\n\r\n        public string Type { get; set; }\r\n        \r\n        public string Name { get; set; }\r\n        \r\n        public string EmailId { get; set; }\r\n        \r\n        public string Password { get; set; }\r\n        \r\n        public List<SprintEditModel> Sprints { get; set; }\r\n        \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Models/EditModels/ProfileEditModel.cs b/Models/EditModels/ProfileEditModel.cs
--- a/Models/EditModels/ProfileEditModel.cs	(revision 355c22f471cda0b0e947d9069697ab7e0f612e79)
+++ b/Models/EditModels/ProfileEditModel.cs	(date 1658744912465)
@@ -16,5 +16,7 @@
         
         public List<SprintEditModel> Sprints { get; set; }
         
+        public List<ProfileManagerEditModel> Managers { get; set; }
+        
     }
 }
\ No newline at end of file
Index: Services/SprintReportManagementService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing flexli_erp_webapi.DataModels;\r\nusing flexli_erp_webapi.EditModels;\r\n\r\nnamespace flexli_erp_webapi.Services\r\n{\r\n    public class SprintReportManagementService\r\n    {\r\n        public static SprintReportEditModel GetSprintReportItemById(string sprintReportLineItemId)\r\n        {\r\n            SprintReport sprintReport;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprintReport = db.SprintReport\r\n                    .FirstOrDefault(x => x.SprintReportLineItemId == sprintReportLineItemId);\r\n\r\n                if (sprintReport == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Error in finding sprintReportLineItem due to invalid Id.\");\r\n                }\r\n\r\n                return GetSprintReportItemByIdFromDb(sprintReport);\r\n            }\r\n        }\r\n\r\n        private static SprintReportEditModel GetSprintReportItemByIdFromDb(SprintReport sprintReport)\r\n        {\r\n            SprintReportEditModel sprintReportEditModel = new SprintReportEditModel()\r\n            {\r\n                SprintReportLineItemId = sprintReport.SprintReportLineItemId,\r\n                TaskId = sprintReport.TaskId,\r\n                CheckListItemId = sprintReport.CheckListItemId,\r\n                Description = sprintReport.Description,\r\n                ResultType = sprintReport.ResultType,\r\n                Result = sprintReport.Result,\r\n                UserComment = sprintReport.UserComment,\r\n                ManagerComment = sprintReport.ManagerComment,\r\n                Approved = sprintReport.Approved,\r\n                Status = (CStatus) Enum.Parse(typeof(CStatus), sprintReport.Status, true),\r\n                WorstCase = sprintReport.WorstCase,\r\n                BestCase = sprintReport.BestCase,\r\n                Score = sprintReport.Score\r\n            };\r\n\r\n            return sprintReportEditModel;\r\n        }\r\n\r\n        public static SprintReportEditModel UpdateSprintReportLineItem(SprintReportEditModel sprintReportEditModel)\r\n        {\r\n            SprintReport sprintReport;\r\n            using (var db = new ErpContext())\r\n            {\r\n                var userId = db.Sprint\r\n                    .Where(x => x.SprintId == sprintReportEditModel.SprintId)\r\n                    .Select(x => x.Owner)\r\n                    .ToString();\r\n\r\n                sprintReport = db.SprintReport\r\n                    .FirstOrDefault(x => x.SprintId == sprintReportEditModel.SprintId && x.CheckListItemId == sprintReportEditModel.CheckListItemId);\r\n\r\n                switch (SprintManagementService.CheckStatus(sprintReportEditModel.SprintId))\r\n                {\r\n                    case \"approved\":\r\n                        sprintReport.Result = sprintReportEditModel.Result;\r\n                        sprintReport.UserComment = sprintReportEditModel.UserComment;\r\n                        sprintReport.ManagerComment = sprintReportEditModel.ManagerComment;\r\n                        sprintReport.Approved = sprintReportEditModel.Approved;\r\n\r\n                        db.SaveChanges();\r\n                        break;\r\n                    \r\n                    case \"requestforclosure\":\r\n                        sprintReport.Result = sprintReportEditModel.Result;\r\n                        sprintReport.UserComment = sprintReportEditModel.UserComment;\r\n                        sprintReport.ManagerComment = sprintReportEditModel.ManagerComment;\r\n\r\n                        db.SaveChanges();\r\n                        break;\r\n                    \r\n                    case \"closed\":\r\n                        sprintReport.ManagerComment = sprintReportEditModel.ManagerComment;\r\n\r\n                        db.SaveChanges();\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return GetSprintReportItemById(sprintReport.SprintReportLineItemId);\r\n        }\r\n        \r\n        public static void ApproveSprintReportLineItems(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                SprintReport sprintReport;\r\n                List<string> sprintReportLineItemIds = db.SprintReport\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.SprintReportLineItemId)\r\n                    .ToList();\r\n                \r\n                sprintReportLineItemIds.ForEach(x=>\r\n                    {\r\n                        sprintReport = db.SprintReport.FirstOrDefault(s => s.SprintReportLineItemId == x);\r\n                        sprintReport.Approved = \"true\";\r\n                        db.SaveChanges();\r\n                    }\r\n                    \r\n                );\r\n            }\r\n        }\r\n        \r\n        public static void AddSprintReportLineItem(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                List<string> tasks = db.TaskDetail\r\n                    .Where(task => task.SprintId == sprintId)\r\n                    .Select(task => task.TaskId)\r\n                    .ToList();\r\n\r\n                foreach (var task in tasks)\r\n                {\r\n                    List<CheckListItemEditModel> checkListItems = CheckListManagementService.GetCheckList(task, \"items\");\r\n\r\n                    foreach (var checkListItem in checkListItems)\r\n                    {\r\n                        SprintReport sprintReport = new SprintReport()\r\n                        {\r\n                            SprintReportLineItemId = GetNextAvailableId(),\r\n                            SprintId = sprintId,\r\n                            TaskId = task,\r\n                            CheckListItemId = checkListItem.CheckListItemId,\r\n                            Description = checkListItem.Description,\r\n                            ResultType = checkListItem.ResultType,\r\n                            UserComment = checkListItem.UserComment,\r\n                            Approved = \"no action\",\r\n                            Status = CStatus.NotCompleted.ToString(),\r\n                            WorstCase = checkListItem.WorstCase,\r\n                            BestCase = checkListItem.BestCase,\r\n                            Score = 0\r\n                        };\r\n\r\n                        db.SprintReport.Add(sprintReport);\r\n                        db.SaveChanges();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        private static string GetNextAvailableId()\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var a = db.SprintReport\r\n                    .Select(x => Convert.ToInt32(x.SprintReportLineItemId))\r\n                    .DefaultIfEmpty(0)\r\n                    .Max();\r\n                return Convert.ToString(a + 1);\r\n            }\r\n          \r\n        }\r\n\r\n        public static bool AllSprintReportLineItemsStatusNotNoChange(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                List<string> status = db.SprintReport\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.Status)\r\n                    .ToList();\r\n\r\n                int flag = 0;\r\n                status.ForEach(x =>\r\n                {\r\n                    if (x == \"NotCompleted\")\r\n                    {\r\n                        flag = 1;\r\n                    }\r\n                });\r\n\r\n                if (flag == 1)\r\n                    return false;\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        public static void PublishActualScores(string sprintId)\r\n        {\r\n            Sprint sprint;\r\n            List<SprintReport> sprintReports;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                sprintReports = db.SprintReport\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .ToList();\r\n                \r\n                sprintReports.ForEach(x =>\r\n                {\r\n                    if (x.Approved == \"no action\")\r\n                    {\r\n                        x.Approved = \"true\";\r\n                        db.SaveChanges();\r\n                    }\r\n\r\n                });\r\n                sprintReports.ForEach(x =>\r\n                {\r\n                    CheckList checkList = db.CheckList\r\n                        .FirstOrDefault(s => s.CheckListItemId == x.CheckListItemId);\r\n\r\n                    if (x.Approved == \"false\" && checkList.Essential)\r\n                    {\r\n                        x.Score = 0;\r\n                        db.SaveChanges();\r\n                    }\r\n                    \r\n                    else if (x.Approved == \"false\" && !checkList.Essential)\r\n                    {\r\n                        if (x.Score > 0)\r\n                        {\r\n                            TaskDetail taskDetail = db.TaskDetail\r\n                                .FirstOrDefault(z => z.TaskId==x.TaskId);\r\n\r\n                            taskDetail.AcceptanceCriteria--;\r\n                            db.SaveChanges();\r\n                            \r\n                            TaskManagementService.UpdateProvisionalTaskScore(x.SprintId);\r\n                        }\r\n                    }\r\n\r\n                });\r\n                \r\n                List<int?> taskScores = db.TaskDetail\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.Score)\r\n                    .ToList();\r\n                \r\n                // Provisional score of sprint\r\n                sprint.Score = taskScores.Sum();\r\n                \r\n                db.SaveChanges();\r\n                \r\n                \r\n            }\r\n        }\r\n\r\n        public static string GetSprintreportLineItemIdForCheckListId(string checkListItemId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                return db.SprintReport.Where(x => x.CheckListItemId == checkListItemId)\r\n                    .Select(x => x.SprintReportLineItemId).ToString();\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Services/SprintReportManagementService.cs b/Services/SprintReportManagementService.cs
--- a/Services/SprintReportManagementService.cs	(revision 355c22f471cda0b0e947d9069697ab7e0f612e79)
+++ b/Services/SprintReportManagementService.cs	(date 1658747283993)
@@ -33,7 +33,7 @@
                 TaskId = sprintReport.TaskId,
                 CheckListItemId = sprintReport.CheckListItemId,
                 Description = sprintReport.Description,
-                ResultType = sprintReport.ResultType,
+                ResultType = (RTypes) Enum.Parse(typeof(RTypes), sprintReport.Status, true),
                 Result = sprintReport.Result,
                 UserComment = sprintReport.UserComment,
                 ManagerComment = sprintReport.ManagerComment,
@@ -133,7 +133,7 @@
                             TaskId = task,
                             CheckListItemId = checkListItem.CheckListItemId,
                             Description = checkListItem.Description,
-                            ResultType = checkListItem.ResultType,
+                            ResultType = checkListItem.ResultType.ToString(),
                             UserComment = checkListItem.UserComment,
                             Approved = "no action",
                             Status = CStatus.NotCompleted.ToString(),
@@ -257,5 +257,62 @@
                     .Select(x => x.SprintReportLineItemId).ToString();
             }
         }
+
+        public static void UpdateProvisionalChecklistScore(string taskId)
+        {
+            List<SprintReport> sprintReports;
+            using (var db = new ErpContext())
+            {
+                sprintReports = db.SprintReport
+                    .Where(x => x.TaskId == taskId)
+                    .ToList();
+                
+                sprintReports.ForEach(sprintReport =>
+                {
+                    if (checkListItem.Essential && checkListItem.Status == CStatus.Completed)
+                    {
+                        if (checkListItem.ResultType == RTypes.Numeric &&
+                            Convert.ToInt32(checkListItem.Result) >= checkListItem.WorstCase &&
+                            Convert.ToInt32(checkListItem.Result) <= checkListItem.BestCase)
+                        {
+                            complete++;
+                            completeEssential++;
+                        }
+
+                        if (checkListItem.ResultType == RTypes.Boolean && checkListItem.Result == "true")
+                        {
+                            complete++;
+                            completeEssential++;
+                        }
+
+                        if (checkListItem.ResultType == RTypes.File && checkListItem.Result != null)
+                        {
+                            complete++;
+                            completeEssential++;
+                        }
+                    }
+                        
+                    else if (checkListItem.Status == CStatus.Completed)
+                    {
+                        if (checkListItem.ResultType == RTypes.Numeric &&
+                            Convert.ToInt32(checkListItem.Result) >= checkListItem.WorstCase &&
+                            Convert.ToInt32(checkListItem.Result) <= checkListItem.BestCase)
+                        {
+                            complete++;
+                        }
+
+                        if (checkListItem.ResultType == RTypes.Boolean && checkListItem.Result == "true")
+                        {
+                            complete++;
+                        }
+
+                        if (checkListItem.ResultType == RTypes.File && checkListItem.Result != null)
+                        {
+                            complete++;
+                        }
+                    }
+                });
+            }
+        }
     }
 }
\ No newline at end of file
Index: Services/SprintManagementService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing flexli_erp_webapi.DataModels;\r\nusing flexli_erp_webapi.EditModels;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace flexli_erp_webapi.Services\r\n{\r\n    public class SprintManagementService\r\n    {\r\n        \r\n        public static List<SprintEditModel> GetSprintsByProfileId(string profileId, string include = null)\r\n        {\r\n            List<string> sprintIds = GetSprintIdsForProfileId(profileId);\r\n            List<SprintEditModel> sprints = new List<SprintEditModel>();\r\n            \r\n           sprintIds.ForEach(x =>\r\n           {\r\n              sprints.Add(GetSprintById(x)); \r\n           });\r\n\r\n           return sprints;\r\n\r\n        }\r\n        \r\n        public static SprintEditModel GetSprintById(string sprintId, string include = null)\r\n        {\r\n            SprintEditModel sprint =  GetSprintByIdFromDb(sprintId);\r\n            sprint.Tasks = new List<TaskDetailEditModel>();\r\n            if (include == \"task\")\r\n            {\r\n                using (var db = new ErpContext())\r\n                {\r\n                    List<string> taskDetailIds = db.TaskDetail\r\n                        .Where(x => x.SprintId == sprintId)\r\n                        .Select(x => x.TaskId)\r\n                        .ToList();\r\n                    taskDetailIds.ForEach(x =>\r\n                        sprint.Tasks.Add(TaskManagementService.GetTaskById(x)));\r\n                    \r\n                }\r\n            }\r\n\r\n            return sprint;\r\n        }\r\n\r\n        private static List<string> GetSprintIdsForProfileId(string profileId, string include = null)\r\n        {\r\n            List<string> sprintIds;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprintIds = db.Sprint\r\n                    .Where(x => x.Owner == profileId)\r\n                    .Select(x => x.SprintId)\r\n                    .ToList();\r\n            }\r\n\r\n            return sprintIds;\r\n\r\n        }\r\n        \r\n        \r\n        public static SprintEditModel AddOrUpdateSprint(SprintEditModel sprintEditModel)\r\n        {\r\n            return AddOrUpdateSprintInDb(sprintEditModel);\r\n\r\n        }\r\n        \r\n        private static SprintEditModel GetSprintByIdFromDb (string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                \r\n                Sprint existingSprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                // Case: TaskDetail does not exist\r\n                if (existingSprint == null)\r\n                    throw new KeyNotFoundException(\"Sprint id does not exist: \" + sprintId);\r\n                \r\n                // Case: In case you have to update data received from db\r\n\r\n                SprintEditModel sprintEditModel = new SprintEditModel()\r\n                {\r\n                   SprintId = existingSprint.SprintId,\r\n                   Description = existingSprint.Description,\r\n                   Owner = existingSprint.Owner,\r\n                   FromDate = existingSprint.FromDate,\r\n                   ToDate = existingSprint.ToDate,\r\n                   Score = existingSprint.Score,\r\n                   Status = (SStatus) Enum.Parse(typeof(SStatus), existingSprint.Status, true),\r\n                   Approved = existingSprint.Approved,\r\n                   Closed = existingSprint.Closed\r\n                };\r\n\r\n                return sprintEditModel;\r\n            }\r\n\r\n        }\r\n        \r\n        private static SprintEditModel AddOrUpdateSprintInDb(SprintEditModel sprintEditModel)\r\n        {\r\n            Sprint sprint;\r\n            \r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintEditModel.SprintId);\r\n\r\n\r\n                if (sprint != null) // update\r\n                {\r\n                    if (sprint.Approved)\r\n                    {\r\n                        throw new ConstraintException(\"Sprint is froze, ask approver to close and plan new sprint\");\r\n                    }\r\n\r\n                    \r\n                    sprint.Description = sprintEditModel.Description;\r\n                    sprint.Owner = sprintEditModel.Owner;\r\n                    sprint.FromDate = sprintEditModel.FromDate;\r\n                    sprint.ToDate = sprintEditModel.ToDate;\r\n                    sprint.Score = sprintEditModel.Score;\r\n                    db.SaveChanges();\r\n                }\r\n                else\r\n                {\r\n                    sprint = new Sprint()\r\n                    {\r\n                        SprintId = GetNextAvailableId(),\r\n                        Description = sprintEditModel.Description,\r\n                        Owner = sprintEditModel.Owner,\r\n                        FromDate = sprintEditModel.FromDate,\r\n                        ToDate = sprintEditModel.ToDate,\r\n                        Status = SStatus.Planning.ToString(),\r\n                        Score = 0,\r\n                        Approved = false,\r\n                        Closed = false\r\n                    };\r\n                    db.Sprint.Add(sprint);\r\n                    db.SaveChanges();\r\n                }\r\n            }\r\n\r\n            return GetSprintById(sprint.SprintId);\r\n        }\r\n\r\n        private static string GetNextAvailableId()\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var a = db.Sprint\r\n                    .Select(x => Convert.ToInt32(x.SprintId))\r\n                    .DefaultIfEmpty(0)\r\n                    .Max();\r\n                return Convert.ToString(a + 1);\r\n            }\r\n          \r\n        }\r\n        \r\n        public static void DeleteSprint(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                // Get Selected Profile\r\n                Sprint existingSprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                if (existingSprint != null)\r\n                {\r\n                    if (existingSprint.Status != SStatus.Planning.ToString())\r\n                    {\r\n                        throw new ConstraintException(\"Cannot delete the sprint, status is not planning\");\r\n                    }\r\n                    \r\n                    db.Sprint.Remove(existingSprint);\r\n                    db.SaveChanges();\r\n                    \r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        public static SprintEditModel RequestForApproval(string sprintId, string userId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId && x.Owner == userId);\r\n\r\n                if (sprint == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Sprint Id or User Id does not exist\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.Planning.ToString())\r\n                {\r\n                    throw new ConstraintException(\"status is not planning, hence request for approval can't be made\");\r\n                }\r\n                \r\n                if (TotalExpectedHours(sprintId) > 6*ValidSprintDays(sprintId))\r\n                {\r\n                    throw new ConstraintException(\"expected hours more then total sprint time\");\r\n                }\r\n\r\n                sprint.Status = SStatus.RequestForApproval.ToString();\r\n                db.SaveChanges();\r\n            }\r\n\r\n            return GetSprintById(sprintId);\r\n        }\r\n\r\n        private static int TotalExpectedHours(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                List<Decimal?> expectedHours = db.TaskDetail\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.ExpectedHours)\r\n                    .ToList();\r\n\r\n                return Convert.ToInt32(expectedHours.Sum());\r\n            }\r\n        }\r\n\r\n        private static int ValidSprintDays(string sprintId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n\r\n                DateTime to = sprint.ToDate;\r\n                DateTime from = sprint.FromDate;\r\n                \r\n                if (to < from)\r\n                    throw new ArgumentException(\"To cannot be smaller than from.\", nameof(to));\r\n\r\n                int n = 0;\r\n                DateTime nextDate = from;\r\n                while(nextDate <= to.Date)\r\n                {\r\n                    if (nextDate.DayOfWeek != DayOfWeek.Saturday && nextDate.DayOfWeek != DayOfWeek.Sunday)\r\n                        n++;\r\n                    nextDate = nextDate.AddDays(1);\r\n                }\r\n\r\n                return n;\r\n            }\r\n        }\r\n\r\n        public static SprintEditModel ApproveSprint(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to approve the sprint\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.RequestForApproval.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint not requested for approval hence can't be approved\");\r\n                }\r\n\r\n                sprint.Status = SStatus.Approved.ToString();\r\n                sprint.Approved = true;\r\n                db.SaveChanges();\r\n\r\n                SprintReportManagementService.AddSprintReportLineItem(sprint.SprintId);\r\n            }\r\n            \r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public static SprintEditModel RequestForClosure(string sprintId, string userId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId && x.Owner == userId);\r\n\r\n                if (sprint == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Sprint Id or User Id does not exist\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.Approved.ToString())\r\n                {\r\n                    throw new ConstraintException(\"status is not approved, hence request for closure can't be made\");\r\n                }\r\n\r\n                sprint.Status = SStatus.RequestForClosure.ToString();\r\n                db.SaveChanges();\r\n            }\r\n\r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public static SprintEditModel CloseSprint(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to close the sprint\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.RequestForClosure.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint not requested for closure hence can't be closed\");\r\n                }\r\n\r\n                sprint.Status = SStatus.Closed.ToString();\r\n                sprint.Closed = true;\r\n                \r\n                // Provisional score of task\r\n                // TaskManagementService.UpdateProvisionalTaskScore(sprintId);\r\n                //\r\n                // List<int?> taskScores = db.TaskDetail\r\n                //     .Where(x => x.SprintId == sprintId)\r\n                //     .Select(x => x.Score)\r\n                //     .ToList();\r\n                //\r\n                // // Provisional score of sprint\r\n                // sprint.Score = taskScores.Sum();\r\n                \r\n                db.SaveChanges();\r\n                \r\n                // Unlinking tasks from sprint\r\n                List<string> tasks = db.TaskDetail\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.TaskId)\r\n                    .ToList();\r\n                \r\n                tasks.ForEach(x =>\r\n                {\r\n                    TaskManagementService.RemoveTaskFromSprint(x);\r\n                });\r\n\r\n            }\r\n            \r\n            return GetSprintById(sprintId);\r\n        }\r\n\r\n        public static SprintEditModel ReviewCompleted(string sprintId, string approverId)\r\n        {\r\n            Sprint sprint;\r\n            using (var db = new ErpContext())\r\n            {\r\n                sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n                \r\n                if(!ProfileManagementService.CheckManagerValidity(sprint.Owner,approverId))\r\n                {\r\n                    throw new ArgumentException(\"Approver id is not eligible to review the sprint\");\r\n                }\r\n\r\n                if (sprint.Status != SStatus.Closed.ToString())\r\n                {\r\n                    throw new ConstraintException(\"Sprint cannot be reviewed as status is not closed\");\r\n                }\r\n\r\n                if (!SprintReportManagementService.AllSprintReportLineItemsStatusNotNoChange(sprintId))\r\n                {\r\n                    throw new ConstraintException(\"Sprint report line items have status no change\");\r\n                }\r\n\r\n                sprint.Status = SStatus.Reviewed.ToString();\r\n                db.SaveChanges();\r\n\r\n                // SprintReportManagementService.PublishActualScores(sprintId);\r\n\r\n            }\r\n            return GetSprintById(sprintId);\r\n        }\r\n        \r\n        public static string CheckStatus(string sprintId)\r\n        {\r\n            SprintEditModel sprintEditModel = GetSprintById(sprintId);\r\n            return sprintEditModel.Status.ToString().ToLower();\r\n        }\r\n\r\n        public static bool CheckApproved(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var status = db.Sprint\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.Approved)\r\n                    .ToString();\r\n\r\n                if (status==\"true\")\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        public static bool CheckClosed(string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var status = db.Sprint\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .Select(x => x.Closed)\r\n                    .Single();\r\n\r\n                if (status)\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Services/SprintManagementService.cs b/Services/SprintManagementService.cs
--- a/Services/SprintManagementService.cs	(revision 355c22f471cda0b0e947d9069697ab7e0f612e79)
+++ b/Services/SprintManagementService.cs	(date 1658747283884)
@@ -329,28 +329,32 @@
                 sprint.Closed = true;
                 
                 // Provisional score of task
-                // TaskManagementService.UpdateProvisionalTaskScore(sprintId);
-                //
-                // List<int?> taskScores = db.TaskDetail
-                //     .Where(x => x.SprintId == sprintId)
-                //     .Select(x => x.Score)
-                //     .ToList();
-                //
-                // // Provisional score of sprint
-                // sprint.Score = taskScores.Sum();
-                
-                db.SaveChanges();
-                
-                // Unlinking tasks from sprint
-                List<string> tasks = db.TaskDetail
+
+                List<string> taskIds = db.TaskDetail
                     .Where(x => x.SprintId == sprintId)
                     .Select(x => x.TaskId)
                     .ToList();
                 
-                tasks.ForEach(x =>
+                taskIds.ForEach(x=>TaskManagementService.UpdateProvisionalTaskScore(x));
+                
+                List<int?> taskScores = db.TaskDetail
+                    .Where(x => x.SprintId == sprintId)
+                    .Select(x => x.Score)
+                    .ToList();
+                
+                // Provisional score of sprint
+                sprint.Score = taskScores.Sum();
+                
+                db.SaveChanges();
+                
+                // Unlinking tasks from sprint
+                taskIds.ForEach(x =>
                 {
                     TaskManagementService.RemoveTaskFromSprint(x);
                 });
+                
+                // Provisional Score for checklist
+                taskIds.ForEach(x=>SprintReportManagementService.UpdateProvisionalChecklistScore(x));
 
             }
             
Index: Services/TaskManagementService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing flexli_erp_webapi.DataModels;\r\nusing flexli_erp_webapi.EditModels;\r\nusing flexli_erp_webapi.LinkedListModel;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\n\r\nnamespace flexli_erp_webapi.Services\r\n{\r\n    public class TaskManagementService\r\n    {\r\n        public static TaskDetailEditModel GetTaskById(string taskId, string include = null)\r\n        {\r\n            TaskDetailEditModel taskDetail = GetTaskByIdFromDb(taskId);\r\n\r\n            if (taskDetail == null)\r\n            {\r\n                    throw new KeyNotFoundException(\"Error in finding required taskDetail list\");\r\n            }\r\n\r\n            if (include == null)\r\n            {\r\n                return taskDetail;\r\n            }\r\n            \r\n            if (include.Contains(\"children\"))\r\n            { \r\n                taskDetail.Children =  GetRankedChildTaskList(taskId);\r\n            }\r\n            if (include.Contains(\"siblings\"))\r\n            { \r\n                taskDetail.Siblings =  GetRankedChildTaskList(taskDetail.ParentTaskId);\r\n            }\r\n            \r\n            if (include.Contains(\"dependency\"))\r\n            {\r\n                taskDetail.UpStreamDependencies = DependencyManagementService\r\n                    .GetUpstreamDependenciesByTaskId(taskId,\"taskDetail\");\r\n                taskDetail.DownStreamDependencies = DependencyManagementService\r\n                    .GetDownstreamDependenciesByTaskId(taskId,\"taskDetail\");\r\n            }\r\n\r\n            return taskDetail;\r\n\r\n        }\r\n\r\n       \r\n        public static TaskDetailEditModel CreateOrUpdateTask(TaskDetailEditModel taskDetailEditModel)\r\n        {\r\n            bool newTask ; \r\n            // Validation 1: Check if Position after is valid\r\n\r\n                // 1.1 -  Position After taskDetail Id exist \r\n            if (!GetChildTaskIdList(taskDetailEditModel.ParentTaskId).Contains(taskDetailEditModel.PositionAfter))\r\n            {\r\n                if (!string.IsNullOrEmpty(taskDetailEditModel.PositionAfter))\r\n                {\r\n                    throw new KeyNotFoundException(\"Position after is invalid\");\r\n                }\r\n              \r\n            }\r\n            // taskDetail is not positioned after itself\r\n            if (taskDetailEditModel.TaskId == taskDetailEditModel.PositionAfter)\r\n            {\r\n                throw new KeyNotFoundException(\"TaskDetail cannot be positioned after itself\");\r\n            }\r\n            // Check if its a new task\r\n\r\n            var result = from s in GetTaskIdList()\r\n                select s.TaskId;\r\n            var temp = result.ToList();\r\n            \r\n            if (result.ToList().Contains(taskDetailEditModel.TaskId))\r\n            {\r\n                newTask = false;\r\n            }\r\n            else\r\n            {\r\n                newTask = true;\r\n            }\r\n            \r\n            \r\n            // ToDo: Validation 2: Check if parent taskDetail id is valid\r\n            \r\n            \r\n          \r\n            // All fields updated except rank\r\n            TaskDetailEditModel updatedTaskDetail = CreateOrUpdateTaskInDb(taskDetailEditModel);\r\n            \r\n           // Check if Ordering of position has been changed\r\n           // If No: Ignore\r\n           // If Yes: Change ranking of the taskDetail\r\n            // Update Ranks in db\r\n\r\n           if (CheckIfPositionHasChanged(taskDetailEditModel,newTask))\r\n           {\r\n               // dummy rank updated\r\n               UpdateRankInDb(updatedTaskDetail.TaskId,Int32.MaxValue);\r\n               List<TaskDetailEditModel> reorderedList = ReorderTaskList(taskDetailEditModel);\r\n\r\n               List<TaskDetailEditModel> rankedTask = UpdateRankOfReorderedList(reorderedList);\r\n\r\n               List<TaskDetailEditModel> positionedTask = UpdatePositionOfRankedTask(rankedTask);\r\n               \r\n               positionedTask.ForEach(x => UpdateRankInDb(x.TaskId,x.Rank));\r\n               positionedTask.ForEach(x => UpdatePositionInDb(x.TaskId,x.PositionAfter));\r\n           }\r\n\r\n           // Async run tag updates for the given taskDetail\r\n           // All those tags that are contained in the taskDetail will get updated\r\n           Task.Run(() => TagManagementService.UpdateTagsContainingTask(taskDetailEditModel));\r\n           return GetTaskById(updatedTaskDetail.TaskId);\r\n        }\r\n        \r\n        public static List<TaskShortDetailEditModel> GetTaskIdList(string parentTaskId = null)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                if (parentTaskId == null)\r\n                {\r\n                    return db.TaskDetail\r\n                        .Select(t => new TaskShortDetailEditModel()\r\n                        {\r\n                            TaskId = t.TaskId,\r\n                            Description = t.Description,\r\n                            Status = (EStatus) Enum.Parse(typeof(EStatus), t.Status, true)\r\n                        })\r\n                        .ToList();\r\n                }\r\n                return db.TaskDetail\r\n                    .Where(t => t.ParentTaskId == parentTaskId)\r\n                    .Select(t => new TaskShortDetailEditModel()\r\n                    {\r\n                        TaskId = t.TaskId,\r\n                        Description = t.Description\r\n                    })\r\n                    .ToList();\r\n                \r\n            }\r\n        }\r\n\r\n        public static void DeleteTask(string taskId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                if ((GetTaskById(taskId, \"children\").Children.Count > 0))\r\n                {\r\n                    throw new KeyNotFoundException(\"TaskDetail cannot be deleted. Contains one or more child taskDetail\");\r\n                }\r\n\r\n                // Get Selected TasK\r\n                TaskDetail existingTask = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == taskId);\r\n                // Get TaskDetail Positioned after selected taskDetail\r\n                TaskDetail taskAfter = db.TaskDetail\r\n                    .FirstOrDefault(x => x.PositionAfter == existingTask.TaskId);\r\n\r\n\r\n\r\n                if (existingTask != null)\r\n                {\r\n                    if (taskAfter != null)\r\n                    {\r\n                        taskAfter.PositionAfter = existingTask.PositionAfter;\r\n                    }\r\n\r\n                    db.TaskDetail.Remove(existingTask);\r\n                    db.SaveChanges();\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n        \r\n        // Removed task will not be shown in Web App until forced\r\n        public static void RemoveTask(string taskId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                if ((GetTaskById(taskId, \"children\").Children.FindAll(\r\n                    x => x.IsRemoved == false).Count > 0))\r\n                {\r\n                    throw new KeyNotFoundException(\"Task cannot be removed. Contains one or more child taskDetail\");\r\n                }\r\n\r\n                // Get Selected TasK\r\n                TaskDetail existingTask = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == taskId);\r\n             \r\n                if (existingTask != null)\r\n                {\r\n                    existingTask.IsRemoved = true;\r\n                    db.SaveChanges();\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        public static TaskDetailEditModel LinkTaskToSprint(string taskId, string sprintId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                TaskDetail existingTask = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == taskId);\r\n                \r\n                // Case: TaskDetail does not exist\r\n                if (existingTask == null)\r\n                    throw new KeyNotFoundException(\"TaskDetail does not exist\");\r\n\r\n                Sprint sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == sprintId);\r\n\r\n                // Case: Sprint is approved\r\n                if (sprint.Approved && !sprint.Closed)\r\n                {\r\n                    throw new ConstraintException(\"cannot link task to sprint as sprint is already approved\");\r\n                }\r\n\r\n                existingTask.SprintId = sprintId;\r\n                db.SaveChanges();\r\n\r\n                return GetTaskById(existingTask.TaskId);\r\n            }\r\n            \r\n        }\r\n        \r\n        public static TaskDetailEditModel RemoveTaskFromSprint(string taskId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                TaskDetail existingTask = db.TaskDetail\r\n                    .Include(x => x.TaskSchedules)\r\n                    .FirstOrDefault(x => x.TaskId == taskId);\r\n                \r\n                // Case: TaskDetail does not exist\r\n                if (existingTask == null)\r\n                    throw new KeyNotFoundException(\"TaskDetail does not exist\");\r\n                \r\n                // Rule: If Task has been scheduled in future for a task\r\n                // then task cannot be removed from sprint\r\n                if (existingTask.TaskSchedules.FindAll(\r\n                    x => x.Date >= DateTime.Today).Count > 0)\r\n                {\r\n                    throw new KeyNotFoundException(\"Cannot remove task from sprint, it is \" +\r\n                                                   \"already scheduled  \");\r\n                }\r\n\r\n                Sprint sprint = db.Sprint\r\n                    .FirstOrDefault(x => x.SprintId == existingTask.SprintId);\r\n                \r\n                // Case: Sprint is already approved\r\n                if (sprint.Approved && !sprint.Closed)\r\n                {\r\n                    throw new ConstraintException(\"cannot delete the task as sprint is already approved\");\r\n                }\r\n                \r\n                existingTask.SprintId = null;\r\n                db.SaveChanges();\r\n\r\n                return GetTaskById(existingTask.TaskId);\r\n            }\r\n            \r\n        }\r\n       \r\n\r\n        private static List<TaskDetailEditModel> ReorderTaskList(TaskDetailEditModel newTaskDetailItemEditModel)\r\n        {\r\n            LinkedChildTaskHead head = LinkedListService.CreateLinkedList(\r\n                    GetTaskById(newTaskDetailItemEditModel.ParentTaskId, \"children\").Children);\r\n            List<TaskDetailEditModel> reorderedList = new List<TaskDetailEditModel>();\r\n\r\n            \r\n\r\n            while (head.Pointer.TaskDetail.TaskId != null)\r\n            {\r\n                LinkedChildTask pointerNext = head.Pointer.Next;\r\n                if (head.Pointer.TaskDetail.TaskId == newTaskDetailItemEditModel.PositionAfter)\r\n                {\r\n                    head.Pointer.Next = new LinkedChildTask()\r\n                    {\r\n                        TaskDetail = newTaskDetailItemEditModel,\r\n                        Next = pointerNext\r\n                    };\r\n\r\n                }\r\n               \r\n                reorderedList.Add(head.Pointer.TaskDetail);\r\n                head.Pointer = head.Pointer.Next;\r\n                \r\n            }\r\n            // Remove Null list created at end\r\n            //reorderedList.RemoveAt(reorderedList.Count - 1);\r\n            // New taskDetail will be created (again) at last\r\n            // Why? Since we atr assigning int.max value as it rank\r\n            // If position_after  = null -> do nothing\r\n            // Else remove it\r\n            if (newTaskDetailItemEditModel.PositionAfter != null)\r\n            {\r\n                reorderedList.RemoveAt(reorderedList.Count - 1);\r\n            }\r\n          \r\n            return reorderedList;\r\n        }\r\n\r\n        \r\n        private static List<TaskDetailEditModel> UpdateRankOfReorderedList(List<TaskDetailEditModel> task)\r\n        {\r\n           List<TaskDetailEditModel> rankedTask = new List<TaskDetailEditModel>();\r\n\r\n           int i = 1;\r\n           while (task.Count > 0)\r\n           {\r\n               TaskDetailEditModel currentTaskDetail = task.First();\r\n               currentTaskDetail.Rank = i;\r\n               rankedTask.Add(currentTaskDetail);\r\n               \r\n               task.RemoveAt(0);\r\n               i = i + 1;\r\n           }\r\n\r\n           return rankedTask;\r\n        }\r\n\r\n\r\n        \r\n        private static void UpdateRankInDb(string taskId, int? rank)\r\n        {\r\n           \r\n            using (var db = new ErpContext())\r\n            {\r\n                TaskDetail task = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == taskId);\r\n                if (task == null)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                task.Rank = rank;\r\n                db.SaveChanges();\r\n   \r\n            }\r\n            \r\n        }\r\n        \r\n        private static void UpdatePositionInDb(string taskId, string position)\r\n        {\r\n           \r\n            using (var db = new ErpContext())\r\n            {\r\n                TaskDetail task = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == taskId);\r\n                if (task == null)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                task.PositionAfter = position;\r\n                db.SaveChanges();\r\n   \r\n            }\r\n            \r\n        }\r\n\r\n        private static TaskDetailEditModel CreateOrUpdateTaskInDb(TaskDetailEditModel taskDetailEditModel)\r\n        {\r\n           TaskDetail task;\r\n           if (taskDetailEditModel.Deadline == null)\r\n           {\r\n               taskDetailEditModel.Deadline = DateTime.MaxValue;\r\n           }\r\n           using (var db = new ErpContext())\r\n            {\r\n                task = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == taskDetailEditModel.TaskId);\r\n\r\n                if (task != null) // update\r\n                {\r\n\r\n                    if (task.AssignedTo != taskDetailEditModel.AssignedTo \r\n                    && task.SprintId != null)\r\n                    {\r\n                        throw new Exception(\"Assignee cannot be changed. Already allocated in sprint\");\r\n                    }\r\n                    task.ParentTaskId = taskDetailEditModel.ParentTaskId;\r\n                    task.CreatedBy = taskDetailEditModel.CreatedBy.ToLower();\r\n                    task.Status = taskDetailEditModel.Status.ToString().ToLower();\r\n                    task.Description = taskDetailEditModel.Description;\r\n                    task.AssignedTo = taskDetailEditModel.AssignedTo.ToLower();\r\n                    task.Deadline = taskDetailEditModel.Deadline;\r\n                    task.ExpectedHours = taskDetailEditModel.ExpectedHours;\r\n                    task.EditedAt = DateTime.Now;\r\n\r\n                    List<string> values = new List<string> { \"planning\", \"requestforapproval\", \"closed\" };\r\n                    if (values.Contains(SprintManagementService.CheckStatus(task.SprintId)))\r\n                    {\r\n                        task.AcceptanceCriteria = taskDetailEditModel.AcceptanceCriteria;\r\n                    }\r\n\r\n                    db.SaveChanges();\r\n                }\r\n                else\r\n                {\r\n                    var dateTime = DateTime.Now;\r\n                    task = new TaskDetail\r\n                    {\r\n                        TaskId = GetNextAvailableId(),\r\n                        ParentTaskId = taskDetailEditModel.ParentTaskId,\r\n                        CreatedAt = dateTime,\r\n                        CreatedBy = taskDetailEditModel.CreatedBy,\r\n                        Status = taskDetailEditModel.Status.ToString().ToLower(),\r\n                        Description = taskDetailEditModel.Description,\r\n                        AssignedTo = taskDetailEditModel.AssignedTo,\r\n                        Deadline = taskDetailEditModel.Deadline,\r\n                        Score = 0,\r\n                        EditedAt = dateTime,\r\n                        ExpectedHours = taskDetailEditModel.ExpectedHours,\r\n                        IsRemoved = false\r\n                        \r\n                    };\r\n                    db.TaskDetail.Add(task);\r\n                    db.SaveChanges();\r\n                }\r\n            }\r\n            // Update Task Hierarchy\r\n            TaskHierarchyManagementService.UpdateTaskHierarchy(task.TaskId);\r\n            return GetTaskById(task.TaskId);\r\n        }\r\n        \r\n        \r\n        private static string GetNextAvailableId()\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var a = db.TaskDetail\r\n                    .Select(x => Convert.ToInt32(x.TaskId))\r\n                    .DefaultIfEmpty(0)\r\n                    .Max();\r\n                return Convert.ToString(a + 1);\r\n            }\r\n          \r\n        }\r\n\r\n        public static List<string> GetChildTaskIdList(string parentTaskId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                return db.TaskDetail\r\n                    .Where(x => x.ParentTaskId == parentTaskId)\r\n                    .Select(t => t.TaskId)\r\n                    .ToList();\r\n            }\r\n        }\r\n        \r\n       \r\n        private static List<TaskDetailEditModel> GetRankedChildTaskList(string  taskId)\r\n        {\r\n\r\n            List<TaskDetailEditModel> taskListEditModels = new List<TaskDetailEditModel>();\r\n\r\n            List<string> taskIdList = GetChildTaskIdList(taskId);\r\n\r\n                taskIdList.ForEach(\r\n                    x => taskListEditModels.Add(\r\n                        GetTaskById(x)));\r\n\r\n                taskListEditModels = taskListEditModels\r\n                    .OrderBy(x => x.Rank)\r\n                    .ToList();\r\n                return taskListEditModels;\r\n                \r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        public static TaskDetailEditModel GetTaskByIdFromDb(string taskId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                \r\n                TaskDetail existingTask = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == taskId);\r\n                \r\n                // Case: TaskDetail does not exist\r\n                if (existingTask == null)\r\n                    return null;\r\n                \r\n                // Case: Status is not mentioned.\r\n                // Its a check, ideally it should never be null\r\n                // Make it Yet To Start\r\n                if (existingTask.Status == null )\r\n                {\r\n                    existingTask.Status = EStatus.yettostart.ToString();\r\n                }\r\n                \r\n                TaskDetailEditModel taskDetailEditModel = new TaskDetailEditModel()\r\n                {\r\n                    TaskId = existingTask.TaskId,\r\n                    ParentTaskId = existingTask.ParentTaskId,\r\n                    CreatedAt = existingTask.CreatedAt,\r\n                    Deadline = existingTask.Deadline,\r\n                    CreatedBy = existingTask.CreatedBy,\r\n                    AssignedTo = existingTask.AssignedTo,\r\n                    Status =  (EStatus) Enum.Parse(typeof(EStatus), existingTask.Status, true),\r\n                    Description = existingTask.Description,\r\n                    PositionAfter = existingTask.PositionAfter,\r\n                    Rank = existingTask.Rank,\r\n                    SprintId = existingTask.SprintId,\r\n                    IsRemoved = existingTask.IsRemoved,\r\n                    ExpectedHours = existingTask.ExpectedHours,\r\n                    Score = existingTask.Score,\r\n                    AcceptanceCriteria = existingTask.AcceptanceCriteria,\r\n                    EditedAt = existingTask.EditedAt\r\n                };\r\n\r\n                return taskDetailEditModel;\r\n            }\r\n\r\n        }\r\n\r\n        private static bool CheckIfPositionHasChanged(TaskDetailEditModel taskDetail,bool newTask)\r\n        {\r\n            if (newTask)\r\n            {\r\n                return true;\r\n            }\r\n            \r\n            if (taskDetail.PositionAfter != GetTaskById(taskDetail.TaskId).PositionAfter)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n         }\r\n\r\n        private static List<TaskDetailEditModel> UpdatePositionOfRankedTask(List<TaskDetailEditModel> rankedTask)\r\n        {\r\n            string previousTaskId = null;\r\n            List<TaskDetailEditModel> positionedTask = new List<TaskDetailEditModel>();\r\n            while (rankedTask.Count > 0)\r\n            {\r\n                TaskDetailEditModel taskDetail = rankedTask.First();\r\n                taskDetail.PositionAfter = previousTaskId;\r\n                positionedTask.Add(taskDetail);\r\n                \r\n                previousTaskId = taskDetail.TaskId;\r\n                rankedTask.RemoveAt(0);\r\n            }\r\n\r\n            return positionedTask;\r\n        }\r\n\r\n        public static void UpdateProvisionalTaskScore(string sprintId)\r\n        {\r\n            List<TaskDetail> tasks;\r\n\r\n            using (var db = new ErpContext())\r\n            {\r\n                tasks = db.TaskDetail\r\n                    .Where(x => x.SprintId == sprintId)\r\n                    .ToList();\r\n                \r\n                tasks.ForEach(task =>\r\n                {\r\n                    List<CheckListItemEditModel>\r\n                        checkListItems = CheckListManagementService.GetCheckList(task.TaskId, \"items\");\r\n                    \r\n                    int complete = 0;\r\n                    int completeEssential = 0;\r\n                    int essential = 0;\r\n                    \r\n                    checkListItems.ForEach(checkListItem =>\r\n                    {\r\n                        if (checkListItem.Essential)\r\n                            essential++;\r\n\r\n                        if (checkListItem.Essential && checkListItem.Status == CStatus.Completed)\r\n                        {\r\n                            complete++;\r\n                            completeEssential++;\r\n                        }\r\n                        \r\n                        else if (checkListItem.Status == CStatus.Completed)\r\n                        {\r\n                            complete++;\r\n                        }\r\n\r\n                    });\r\n                    \r\n                    if (completeEssential < essential)\r\n                        task.Score = 0;\r\n\r\n                    else if (complete > task.AcceptanceCriteria)\r\n                        task.Score = Convert.ToInt32(task.ExpectedHours / 3);\r\n\r\n                    db.SaveChanges();\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n        public static void UpdateEditedAt(string taskId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                TaskDetail taskDetail = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == taskId);\r\n                \r\n                taskDetail.EditedAt = DateTime.Now;\r\n                db.SaveChanges();\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Services/TaskManagementService.cs b/Services/TaskManagementService.cs
--- a/Services/TaskManagementService.cs	(revision 355c22f471cda0b0e947d9069697ab7e0f612e79)
+++ b/Services/TaskManagementService.cs	(date 1658746810109)
@@ -555,52 +555,79 @@
             return positionedTask;
         }
 
-        public static void UpdateProvisionalTaskScore(string sprintId)
+        public static void UpdateProvisionalTaskScore(string taskId)
         {
-            List<TaskDetail> tasks;
-
+            TaskDetail task;
+            
             using (var db = new ErpContext())
             {
-                tasks = db.TaskDetail
-                    .Where(x => x.SprintId == sprintId)
-                    .ToList();
+                task = db.TaskDetail
+                    .FirstOrDefault(x => x.TaskId == taskId);
                 
-                tasks.ForEach(task =>
-                {
-                    List<CheckListItemEditModel>
-                        checkListItems = CheckListManagementService.GetCheckList(task.TaskId, "items");
+                List<CheckListItemEditModel>
+                    checkListItems = CheckListManagementService.GetCheckList(task.TaskId, "items");
                     
-                    int complete = 0;
-                    int completeEssential = 0;
-                    int essential = 0;
+                int complete = 0;
+                int completeEssential = 0;
+                int essential = 0;
                     
-                    checkListItems.ForEach(checkListItem =>
-                    {
-                        if (checkListItem.Essential)
-                            essential++;
+                checkListItems.ForEach(checkListItem =>
+                {
+                    if (checkListItem.Essential)
+                        essential++;
 
-                        if (checkListItem.Essential && checkListItem.Status == CStatus.Completed)
+                    if (checkListItem.Essential && checkListItem.Status == CStatus.Completed)
+                    {
+                        if (checkListItem.ResultType == RTypes.Numeric &&
+                            Convert.ToInt32(checkListItem.Result) >= checkListItem.WorstCase &&
+                            Convert.ToInt32(checkListItem.Result) <= checkListItem.BestCase)
                         {
+                            complete++;
+                            completeEssential++;
+                        }
+
+                        if (checkListItem.ResultType == RTypes.Boolean && checkListItem.Result == "true")
+                        {
+                            complete++;
+                            completeEssential++;
+                        }
+
+                        if (checkListItem.ResultType == RTypes.File && checkListItem.Result != null)
+                        {
                             complete++;
                             completeEssential++;
                         }
+                    }
                         
-                        else if (checkListItem.Status == CStatus.Completed)
+                    else if (checkListItem.Status == CStatus.Completed)
+                    {
+                        if (checkListItem.ResultType == RTypes.Numeric &&
+                            Convert.ToInt32(checkListItem.Result) >= checkListItem.WorstCase &&
+                            Convert.ToInt32(checkListItem.Result) <= checkListItem.BestCase)
                         {
                             complete++;
                         }
 
-                    });
+                        if (checkListItem.ResultType == RTypes.Boolean && checkListItem.Result == "true")
+                        {
+                            complete++;
+                        }
+
+                        if (checkListItem.ResultType == RTypes.File && checkListItem.Result != null)
+                        {
+                            complete++;
+                        }
+                    }
+
+                });
                     
-                    if (completeEssential < essential)
-                        task.Score = 0;
+                if (completeEssential < essential)
+                    task.Score = 0;
 
-                    else if (complete > task.AcceptanceCriteria)
-                        task.Score = Convert.ToInt32(task.ExpectedHours / 3);
+                else if (complete > task.AcceptanceCriteria && essential == completeEssential)
+                    task.Score = Convert.ToInt32(task.ExpectedHours / 3);
 
-                    db.SaveChanges();
-
-                });
+                db.SaveChanges();
             }
         }
 
Index: .idea/.idea.flexli-erp-webapi/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoGeneratedRunConfigurationManager\">\r\n    <projectFile>m-sort-server.csproj</projectFile>\r\n    <projectFile>flexli-erp-webapi.csproj</projectFile>\r\n    <projectFile>ConsoleApp1/ConsoleApp1.csproj</projectFile>\r\n    <projectFile>../ConsoleApp2/ConsoleApp2.csproj</projectFile>\r\n    <projectFile profileName=\"IIS Express\">flexli-erp-webapi.csproj</projectFile>\r\n    <projectFile profileName=\"flexStore\">flexli-erp-webapi.csproj</projectFile>\r\n    <projectFile pubXmlPath=\"Properties/PublishProfiles/FolderProfile.pubxml\">flexli-erp-webapi.csproj</projectFile>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d5ac732f-a082-4366-9613-9b0ed1fa22ca\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/.idea.flexli-erp-webapi/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/.idea.flexli-erp-webapi/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Models/DataModels/CheckList.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Models/DataModels/CheckList.cs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Models/EditModels/CheckListItemEditModel.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Models/EditModels/CheckListItemEditModel.cs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Services/CheckListManagementService.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Services/CheckListManagementService.cs\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"TypeScript File\" />\r\n        <option value=\"XML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/..\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$USER_HOME$/.nuget/packages/microsoft.net.test.sdk/16.2.0/build/netcoreapp1.0/Microsoft.NET.Test.Sdk.Program.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/a0b56b10bf50171c7d24c28488c1db3bf2d26a51c273c4d15cdbecf677ce4faa/ExceptionDispatchInfo.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/Controller/SearchController.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/Controller/TaskController.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/Services/SprintManagementService.cs\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"IdeDocumentHistory\">\r\n    <option name=\"CHANGED_PATHS\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/Comment.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/CommentEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/TaskManagementController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/CommentController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/CommentManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/CheckListController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/TaskSheet.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/ProfileManagemetService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/CheckListManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/SprintManagementService.ts\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/Sprint.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/TaskEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/TaskSummaryService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/SprintEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/SprintManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/SprintController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/TaskSummaryEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/BsonModels/TaskSearchView.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/SearchController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/SearchQueryEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/SearchManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/TaskSummary.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/TaskSchedule.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/TaskHierarchy.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/TaskHierarchyController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/TaskHierarchyEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/DependencyManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/Profile.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/ProfileEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/ProfileController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/ProfileManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/TaskSummaryManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/template_task.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/TemplateTaskEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/ErpContext.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/Template.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/TemplateTask.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/TemplateEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/TemplateManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/TemplateController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/TaskSummaryController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/DataModels/TaskDetail.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/TaskDetailEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/TagManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/TaskHierarchyManagementService .cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/TaskShortDetailEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/TaskController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/TaskManagementService.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Controller/TaskScheduleController.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Models/EditModels/TaskScheduleEditModel.cs\" />\r\n        <option value=\"$PROJECT_DIR$/Services/TaskScheduleManagementService.cs\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"SWEA\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"23awSKHkDOpFj9D8gGqn5FuuTFW\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\".NET Launch Settings Profile.flexStore\">\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (10)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/bin/Release/netcoreapp2.1/publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (11)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/bin/Release/netcoreapp2.1/publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (12)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/bin/Release/netcoreapp2.1/publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (13)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/bin/Release/netcoreapp2.1/publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (14)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/bin/Release/netcoreapp2.1/publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (1)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\" temporary=\"true\">\r\n      <riderPublish runtime=\"win-x64\" target_folder=\"$PROJECT_DIR$/../publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (2)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\" temporary=\"true\">\r\n      <riderPublish runtime=\"win-x64\" target_folder=\"$PROJECT_DIR$/../publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (3)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish runtime=\"win-x64\" target_folder=\"$PROJECT_DIR$/../publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (4)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\" temporary=\"true\">\r\n      <riderPublish runtime=\"win-x64\" target_folder=\"$PROJECT_DIR$/../publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (5)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/../publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (6)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\" temporary=\"true\">\r\n      <riderPublish runtime=\"win-x64\" target_folder=\"$PROJECT_DIR$/../publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (7)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/bin/Release/netcoreapp2.1/publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (8)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/bin/Release/netcoreapp2.1/publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder (9)\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" runtime=\"Portable\" target_folder=\"$PROJECT_DIR$/bin/Release/netcoreapp2.1/publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Publish flexli-erp-webapi to folder\" type=\"DotNetFolderPublish\" factoryName=\"Publish to folder\" temporary=\"true\">\r\n      <riderPublish runtime=\"win-x64\" target_folder=\"$PROJECT_DIR$/../publish\" target_framework=\"netcoreapp2.1\" uuid_high=\"-3596523917752447540\" uuid_low=\"-7764986485510117418\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ConsoleApp1\" type=\"DotNetProject\" factoryName=\".NET Project\">\r\n      <option name=\"EXE_PATH\" value=\"\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"PASS_PARENT_ENVS\" value=\"1\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"PROJECT_PATH\" value=\"$PROJECT_DIR$/ConsoleApp1/ConsoleApp1.csproj\" />\r\n      <option name=\"PROJECT_EXE_PATH_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_ARGUMENTS_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_WORKING_DIRECTORY_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_KIND\" value=\"DotNetCore\" />\r\n      <option name=\"PROJECT_TFM\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ConsoleApp2\" type=\"DotNetProject\" factoryName=\".NET Project\">\r\n      <option name=\"EXE_PATH\" value=\"\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"PASS_PARENT_ENVS\" value=\"1\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"PROJECT_PATH\" value=\"$PROJECT_DIR$/../api-unit-testing/api-unit-testing.csproj\" />\r\n      <option name=\"PROJECT_EXE_PATH_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_ARGUMENTS_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_WORKING_DIRECTORY_TRACKING\" value=\"1\" />\r\n      <option name=\"PROJECT_KIND\" value=\"DotNetCore\" />\r\n      <option name=\"PROJECT_TFM\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"flexStore\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/flexli-erp-webapi.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\".NETCoreApp,Version=v2.1\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"flexStore\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"flexli-erp-webapi\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/flexli-erp-webapi.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\".NETCoreApp,Version=v2.1\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"m_sort_server\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"m-sort-server: IIS Express\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/flexli-erp-webapi.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\".NETCoreApp,Version=v2.1\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"IIS Express\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\".NET Launch Settings Profile.m-sort-server: IIS Express\" />\r\n      <item itemvalue=\".NET Launch Settings Profile.flexStore\" />\r\n      <item itemvalue=\".NET Launch Settings Profile.flexli-erp-webapi\" />\r\n      <item itemvalue=\".NET Project.ConsoleApp1\" />\r\n      <item itemvalue=\".NET Project.ConsoleApp2\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (10)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (11)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (12)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (13)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (14)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (7)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (8)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (9)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (5)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (3)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (1)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (2)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (6)\" />\r\n      <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (4)\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (4)\" />\r\n        <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (6)\" />\r\n        <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (2)\" />\r\n        <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder (1)\" />\r\n        <item itemvalue=\"Publish to folder.Publish flexli-erp-webapi to folder\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d5ac732f-a082-4366-9613-9b0ed1fa22ca\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1641985504160</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1641985504160</updated>\r\n      <workItem from=\"1641985516767\" duration=\"228000\" />\r\n      <workItem from=\"1641986348593\" duration=\"1060000\" />\r\n      <workItem from=\"1641994739608\" duration=\"274000\" />\r\n      <workItem from=\"1646738593651\" duration=\"17000\" />\r\n      <workItem from=\"1647839145279\" duration=\"662000\" />\r\n      <workItem from=\"1647855187357\" duration=\"1874000\" />\r\n      <workItem from=\"1647862952348\" duration=\"8778000\" />\r\n      <workItem from=\"1647930917093\" duration=\"17441000\" />\r\n      <workItem from=\"1648014264005\" duration=\"5299000\" />\r\n      <workItem from=\"1648023630846\" duration=\"3205000\" />\r\n      <workItem from=\"1648617200535\" duration=\"14547000\" />\r\n      <workItem from=\"1648643900073\" duration=\"2481000\" />\r\n      <workItem from=\"1649508686111\" duration=\"17393000\" />\r\n      <workItem from=\"1649742433140\" duration=\"23077000\" />\r\n      <workItem from=\"1649835724366\" duration=\"176000\" />\r\n      <workItem from=\"1649842004644\" duration=\"779000\" />\r\n      <workItem from=\"1649847016996\" duration=\"6066000\" />\r\n      <workItem from=\"1650008334170\" duration=\"2760000\" />\r\n      <workItem from=\"1650015245957\" duration=\"652000\" />\r\n      <workItem from=\"1650351952830\" duration=\"1656000\" />\r\n      <workItem from=\"1650365738876\" duration=\"1548000\" />\r\n      <workItem from=\"1650522979051\" duration=\"3791000\" />\r\n      <workItem from=\"1650547683157\" duration=\"1491000\" />\r\n      <workItem from=\"1650619064623\" duration=\"5681000\" />\r\n      <workItem from=\"1650887391677\" duration=\"5576000\" />\r\n      <workItem from=\"1650950272880\" duration=\"1052000\" />\r\n      <workItem from=\"1650953710190\" duration=\"12533000\" />\r\n      <workItem from=\"1651037275984\" duration=\"13254000\" />\r\n      <workItem from=\"1651059415766\" duration=\"28000\" />\r\n      <workItem from=\"1651124096005\" duration=\"4060000\" />\r\n      <workItem from=\"1651223863204\" duration=\"2963000\" />\r\n      <workItem from=\"1651298721445\" duration=\"1456000\" />\r\n      <workItem from=\"1651476926285\" duration=\"4641000\" />\r\n      <workItem from=\"1651583132097\" duration=\"1954000\" />\r\n      <workItem from=\"1651641848952\" duration=\"11188000\" />\r\n      <workItem from=\"1651664412300\" duration=\"1853000\" />\r\n      <workItem from=\"1651731409619\" duration=\"5310000\" />\r\n      <workItem from=\"1652162537871\" duration=\"38000\" />\r\n      <workItem from=\"1653389776530\" duration=\"3583000\" />\r\n      <workItem from=\"1654257699940\" duration=\"3650000\" />\r\n      <workItem from=\"1654322213053\" duration=\"4438000\" />\r\n      <workItem from=\"1654497310541\" duration=\"415000\" />\r\n      <workItem from=\"1654515845618\" duration=\"1459000\" />\r\n      <workItem from=\"1654567482069\" duration=\"2980000\" />\r\n      <workItem from=\"1654599121447\" duration=\"5869000\" />\r\n      <workItem from=\"1654610504886\" duration=\"4428000\" />\r\n      <workItem from=\"1654621057131\" duration=\"903000\" />\r\n      <workItem from=\"1654662903824\" duration=\"1768000\" />\r\n      <workItem from=\"1654680110150\" duration=\"2983000\" />\r\n      <workItem from=\"1654772431273\" duration=\"1970000\" />\r\n      <workItem from=\"1654856657937\" duration=\"150000\" />\r\n      <workItem from=\"1655188448315\" duration=\"876000\" />\r\n      <workItem from=\"1655193953287\" duration=\"2621000\" />\r\n      <workItem from=\"1655197191964\" duration=\"120000\" />\r\n      <workItem from=\"1655197344557\" duration=\"1909000\" />\r\n      <workItem from=\"1655200105242\" duration=\"96000\" />\r\n      <workItem from=\"1655200241043\" duration=\"2486000\" />\r\n      <workItem from=\"1655203427875\" duration=\"85000\" />\r\n      <workItem from=\"1655203539599\" duration=\"183000\" />\r\n      <workItem from=\"1655203752704\" duration=\"64000\" />\r\n      <workItem from=\"1655291233652\" duration=\"8869000\" />\r\n      <workItem from=\"1655459331439\" duration=\"1922000\" />\r\n      <workItem from=\"1657190478591\" duration=\"10392000\" />\r\n      <workItem from=\"1657608522190\" duration=\"346000\" />\r\n      <workItem from=\"1657609963602\" duration=\"1187000\" />\r\n      <workItem from=\"1657627503870\" duration=\"14730000\" />\r\n      <workItem from=\"1657737265562\" duration=\"605000\" />\r\n      <workItem from=\"1657801442432\" duration=\"1584000\" />\r\n      <workItem from=\"1657884408771\" duration=\"4284000\" />\r\n      <workItem from=\"1657898194415\" duration=\"2996000\" />\r\n      <workItem from=\"1657954232651\" duration=\"6339000\" />\r\n      <workItem from=\"1657984603104\" duration=\"9086000\" />\r\n      <workItem from=\"1658125538879\" duration=\"1159000\" />\r\n      <workItem from=\"1658139372752\" duration=\"7946000\" />\r\n      <workItem from=\"1658202215337\" duration=\"13850000\" />\r\n      <workItem from=\"1658291706675\" duration=\"4347000\" />\r\n      <workItem from=\"1658415932718\" duration=\"9081000\" />\r\n      <workItem from=\"1658496107500\" duration=\"4877000\" />\r\n      <workItem from=\"1658544568410\" duration=\"15672000\" />\r\n      <workItem from=\"1658652333816\" duration=\"8631000\" />\r\n      <workItem from=\"1658667340160\" duration=\"12117000\" />\r\n      <workItem from=\"1658740790841\" duration=\"528000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnityCheckinConfiguration\" checkUnsavedScenes=\"false\" />\r\n  <component name=\"UnityProjectConfiguration\" hasMinimizedUI=\"false\" />\r\n  <component name=\"UnityUnitTestConfiguration\" currentTestLauncher=\"NUnit\" />\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$\" />\r\n    </ignored-roots>\r\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/DependencyManagementService.cs</url>\r\n          <line>76</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\DependencyManagementService.cs\" initialLine=\"76\" />\r\n          <option name=\"timeStamp\" value=\"23\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskManagementService.cs</url>\r\n          <line>44</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TaskManagementService.cs\" initialLine=\"38\" />\r\n          <option name=\"timeStamp\" value=\"24\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskSummaryManagementService.cs</url>\r\n          <line>163</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TaskSummaryManagementService.cs\" initialLine=\"90\" />\r\n          <option name=\"timeStamp\" value=\"25\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/SearchManagementService.cs</url>\r\n          <line>18</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\SearchManagementService.cs\" initialLine=\"18\" />\r\n          <option name=\"timeStamp\" value=\"30\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/SearchManagementService.cs</url>\r\n          <line>96</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\SearchManagementService.cs\" initialLine=\"94\" />\r\n          <option name=\"timeStamp\" value=\"31\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskManagementService.cs</url>\r\n          <line>98</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TaskManagementService.cs\" initialLine=\"83\" />\r\n          <option name=\"timeStamp\" value=\"34\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskManagementService.cs</url>\r\n          <line>531</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TaskManagementService.cs\" initialLine=\"472\" />\r\n          <option name=\"timeStamp\" value=\"35\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskHierarchyManagementService .cs</url>\r\n          <line>44</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TaskHierarchyManagementService .cs\" initialLine=\"22\" />\r\n          <option name=\"timeStamp\" value=\"36\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskHierarchyManagementService .cs</url>\r\n          <line>53</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TaskHierarchyManagementService .cs\" initialLine=\"30\" />\r\n          <option name=\"timeStamp\" value=\"37\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskHierarchyManagementService .cs</url>\r\n          <line>61</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TaskHierarchyManagementService .cs\" initialLine=\"38\" />\r\n          <option name=\"timeStamp\" value=\"38\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/DependencyManagementService.cs</url>\r\n          <line>29</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\DependencyManagementService.cs\" initialLine=\"29\" />\r\n          <option name=\"timeStamp\" value=\"44\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/DependencyManagementService.cs</url>\r\n          <line>34</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\DependencyManagementService.cs\" initialLine=\"34\" />\r\n          <option name=\"timeStamp\" value=\"45\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/DependencyManagementService.cs</url>\r\n          <line>42</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\DependencyManagementService.cs\" initialLine=\"42\" />\r\n          <option name=\"timeStamp\" value=\"46\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/SearchManagementService.cs</url>\r\n          <line>112</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\SearchManagementService.cs\" initialLine=\"112\" />\r\n          <option name=\"timeStamp\" value=\"47\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/SearchManagementService.cs</url>\r\n          <line>26</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\SearchManagementService.cs\" initialLine=\"26\" />\r\n          <option name=\"timeStamp\" value=\"48\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/SearchManagementService.cs</url>\r\n          <line>115</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\SearchManagementService.cs\" initialLine=\"115\" />\r\n          <option name=\"timeStamp\" value=\"49\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TagManagementService.cs</url>\r\n          <line>207</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TagManagementService.cs\" initialLine=\"206\" />\r\n          <option name=\"timeStamp\" value=\"50\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TagManagementService.cs</url>\r\n          <line>101</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TagManagementService.cs\" initialLine=\"101\" />\r\n          <option name=\"timeStamp\" value=\"51\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskManagementService.cs</url>\r\n          <line>76</line>\r\n          <properties documentPath=\"C:\\Users\\bhole\\Desktop\\ERP\\flexli-erp-webapi\\Services\\TaskManagementService.cs\" initialLine=\"74\" />\r\n          <option name=\"timeStamp\" value=\"52\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskSummaryManagementService.cs</url>\r\n          <line>253</line>\r\n          <properties documentPath=\"C:\\Users\\Hi\\Desktop\\ERP\\erp-webapi\\Services\\TaskSummaryManagementService.cs\" initialLine=\"236\" containingFunctionPresentation=\"method 'UpdateDailyTaskActualTime'\" />\r\n          <option name=\"timeStamp\" value=\"53\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Controller/TaskController.cs</url>\r\n          <line>27</line>\r\n          <properties documentPath=\"C:\\Users\\Hi\\Desktop\\ERP\\erp-webapi\\Controller\\TaskController.cs\" initialLine=\"27\" containingFunctionPresentation=\"method 'GetTaskById'\" />\r\n          <option name=\"timeStamp\" value=\"56\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskManagementService.cs</url>\r\n          <line>17</line>\r\n          <properties documentPath=\"C:\\Users\\Hi\\Desktop\\ERP\\erp-webapi\\Services\\TaskManagementService.cs\" initialLine=\"16\" containingFunctionPresentation=\"method 'GetTaskById'\" />\r\n          <option name=\"timeStamp\" value=\"57\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskManagementService.cs</url>\r\n          <line>19</line>\r\n          <properties documentPath=\"C:\\Users\\Hi\\Desktop\\ERP\\erp-webapi\\Services\\TaskManagementService.cs\" initialLine=\"18\" containingFunctionPresentation=\"method 'GetTaskById'\" />\r\n          <option name=\"timeStamp\" value=\"58\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskManagementService.cs</url>\r\n          <line>485</line>\r\n          <properties documentPath=\"C:\\Users\\Hi\\Desktop\\ERP\\erp-webapi\\Services\\TaskManagementService.cs\" initialLine=\"459\" containingFunctionPresentation=\"method 'GetTaskByIdFromDb'\" />\r\n          <option name=\"timeStamp\" value=\"59\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/Services/TaskManagementService.cs</url>\r\n          <line>490</line>\r\n          <properties documentPath=\"C:\\Users\\Hi\\Desktop\\ERP\\erp-webapi\\Services\\TaskManagementService.cs\" initialLine=\"464\" containingFunctionPresentation=\"method 'GetTaskByIdFromDb'\" />\r\n          <option name=\"timeStamp\" value=\"60\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.flexli-erp-webapi/.idea/workspace.xml b/.idea/.idea.flexli-erp-webapi/.idea/workspace.xml
--- a/.idea/.idea.flexli-erp-webapi/.idea/workspace.xml	(revision 355c22f471cda0b0e947d9069697ab7e0f612e79)
+++ b/.idea/.idea.flexli-erp-webapi/.idea/workspace.xml	(date 1658747285110)
@@ -33,9 +33,13 @@
   <component name="ChangeListManager">
     <list default="true" id="d5ac732f-a082-4366-9613-9b0ed1fa22ca" name="Default Changelist" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/.idea.flexli-erp-webapi/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/.idea.flexli-erp-webapi/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Models/DataModels/CheckList.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Models/DataModels/CheckList.cs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Models/EditModels/CheckListItemEditModel.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Models/EditModels/CheckListItemEditModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Models/EditModels/ProfileEditModel.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Models/EditModels/ProfileEditModel.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Models/EditModels/SprintReportEditModel.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Models/EditModels/SprintReportEditModel.cs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Services/CheckListManagementService.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Services/CheckListManagementService.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Services/SprintManagementService.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Services/SprintManagementService.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Services/SprintReportManagementService.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Services/SprintReportManagementService.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Services/TaskManagementService.cs" beforeDir="false" afterPath="$PROJECT_DIR$/Services/TaskManagementService.cs" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -412,6 +416,7 @@
       <workItem from="1658652333816" duration="8631000" />
       <workItem from="1658667340160" duration="12117000" />
       <workItem from="1658740790841" duration="528000" />
+      <workItem from="1658743361021" duration="3311000" />
     </task>
     <servers />
   </component>
Index: Services/CheckListManagementService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing flexli_erp_webapi.DataModels;\r\nusing flexli_erp_webapi.EditModels;\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\n\r\nnamespace flexli_erp_webapi.Services\r\n{\r\n    public class CheckListManagementService\r\n    {\r\n        public static List<CheckListItemEditModel> GetCheckList(string taskId, string include)\r\n        {\r\n           \r\n            using (var db = new ErpContext())\r\n            {\r\n               \r\n                if (include.Contains(\"items\"))\r\n                {\r\n                    return GetCheckListForATaskId(taskId);\r\n                }\r\n\r\n                throw new KeyNotFoundException(\"Error in finding required check list\");\r\n            }\r\n        }\r\n        public static CheckListItemEditModel CreateOrUpdateCheckListItem(CheckListItemEditModel checkListItemEditModel)\r\n        {\r\n\r\n            return CreateOrUpdateCheckListInDb(checkListItemEditModel);\r\n            \r\n            \r\n        }\r\n\r\n        public static void DeleteCheckListItem(string checkListItemId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                \r\n\r\n                // Get Selected TasK\r\n                CheckList existingCheckList = db.CheckList\r\n                    .FirstOrDefault(x => x.CheckListItemId == checkListItemId);\r\n                \r\n\r\n\r\n\r\n                if (existingCheckList != null)\r\n                {\r\n                    var sprintId = db.TaskDetail\r\n                        .Where(x => x.TaskId == existingCheckList.TaskId)\r\n                        .Select(x => x.SprintId)\r\n                        .ToString();\r\n\r\n                    if (SprintManagementService.CheckApproved(sprintId))\r\n                    {\r\n                        throw new ConstraintException(\"Checklist cannot be deleted, sprint is already approved\");\r\n                    }\r\n                    \r\n                    db.CheckList.Remove(existingCheckList);\r\n                    db.SaveChanges();\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        \r\n      \r\n\r\n        \r\n        private static CheckListItemEditModel CreateOrUpdateCheckListInDb(CheckListItemEditModel checkListItemEditModel)\r\n        {\r\n            CheckList checkList;\r\n            bool newCheckList = false;\r\n            // [proxy] Using sprint status as planning  in case sprint not associated to the task\r\n            SStatus status = SStatus.Planning ;\r\n            \r\n            using (var db = new ErpContext())\r\n            {\r\n\r\n                // [check] Task id exists\r\n                TaskDetail taskDetail = db.TaskDetail\r\n                    .FirstOrDefault(x => x.TaskId == checkListItemEditModel.TaskId);\r\n                if (taskDetail == null)\r\n                {\r\n                    throw new KeyNotFoundException(\"Task id does not exist\");\r\n                }\r\n                checkList = db.CheckList\r\n                    .FirstOrDefault(x => x.CheckListItemId == checkListItemEditModel.CheckListItemId);\r\n\r\n                if (checkList == null)\r\n                {\r\n                    // [check] new task cannot be added once sprint approved\r\n                    if(taskDetail.SprintId != null)\r\n                        status = SprintManagementService.GetSprintById(taskDetail.SprintId)\r\n                        .Status;\r\n                    if (status != SStatus.Planning || status != SStatus.RequestForApproval)\r\n                    {\r\n                        throw new KeyNotFoundException(\"New Checklist cannot be added once sprint is approved\");\r\n                    }\r\n                    // [case] creating new checklist\r\n                    checkList = new CheckList();\r\n                    checkList.CheckListItemId = GetNextAvailableId();\r\n                    newCheckList = true;\r\n                }\r\n                else\r\n                {\r\n                    checkList.CheckListItemId = checkListItemEditModel.CheckListItemId;\r\n                    \r\n                    // get Sprint Status\r\n                    TaskDetail taskDetailIndB = db.TaskDetail\r\n                        .FirstOrDefault(x => x.TaskId == checkList.TaskId);\r\n                    status = SprintManagementService.GetSprintById(taskDetailIndB.SprintId)\r\n                        .Status; \r\n                }\r\n                 \r\n                    \r\n                if (status != SStatus.Reviewed)\r\n                {\r\n                    checkList.ManagerComment = checkListItemEditModel.ManagerComment;\r\n                }\r\n                if (status != SStatus.Closed)\r\n                {\r\n                        checkList.UserComment = checkListItemEditModel.UserComment;\r\n                        checkList.Status = checkListItemEditModel.Status.ToString();\r\n                        checkList.Result = checkListItemEditModel.Result;\r\n                }\r\n                if (status != SStatus.Approved)\r\n                {\r\n                        checkList.Description = checkListItemEditModel.Description;\r\n                        checkList.TaskId = checkListItemEditModel.TaskId;\r\n                        checkList.WorstCase = checkListItemEditModel.WorstCase;\r\n                        checkList.BestCase = checkListItemEditModel.BestCase;\r\n                        checkList.ResultType = checkListItemEditModel.ResultType;\r\n                        checkList.Essential = checkListItemEditModel.Essential;\r\n                } \r\n               \r\n                \r\n                if ( newCheckList)\r\n                {\r\n                    db.CheckList.Add(checkList);\r\n                    db.SaveChanges();\r\n                   \r\n                }\r\n                else\r\n                {\r\n                    if(taskDetail.SprintId != null)\r\n                        status = SprintManagementService.GetSprintById(taskDetail.SprintId)\r\n                            .Status;\r\n                    if (status != SStatus.Planning || status != SStatus.RequestForApproval)\r\n                    {\r\n                        SprintReportManagementService.UpdateSprintReportLineItem(GetSprintReportLineItemForCheckListitem(checkListItemEditModel));\r\n                    }\r\n                    \r\n                    db.SaveChanges();\r\n                }\r\n            }\r\n\r\n            return GetCheckListById(checkList.CheckListItemId);\r\n        }\r\n\r\n        \r\n        public static SprintReportEditModel GetSprintReportLineItemForCheckListitem(CheckListItemEditModel checkListItem)\r\n        {\r\n            string sprintReportLineItemId =\r\n                SprintReportManagementService.GetSprintreportLineItemIdForCheckListId(checkListItem.CheckListItemId);\r\n            SprintReportEditModel sprintReportEditModel = SprintReportManagementService\r\n                .GetSprintReportItemById(sprintReportLineItemId);\r\n            sprintReportEditModel.ManagerComment = checkListItem.ManagerComment;\r\n            sprintReportEditModel.Result = checkListItem.Result;\r\n            sprintReportEditModel.UserComment = checkListItem.UserComment;\r\n            return sprintReportEditModel;\r\n        \r\n        }\r\n        \r\n\r\n\r\n        private static string GetNextAvailableId()\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                var a = db.CheckList\r\n                    .Select(x => Convert.ToInt32(x.CheckListItemId))\r\n                    .DefaultIfEmpty(0)\r\n                    .Max();\r\n                return Convert.ToString(a + 1);\r\n            }\r\n          \r\n        }\r\n        \r\n        private static List<CheckListItemEditModel> GetCheckListForATaskId(string  taskId)\r\n        {\r\n\r\n            List<CheckListItemEditModel> checkListEditModels = new List<CheckListItemEditModel>();\r\n            using (var db = new ErpContext())\r\n            {\r\n                List<string> checkList = db.CheckList\r\n                    .Where(x => x.TaskId == taskId)\r\n                    .Select(t => t.CheckListItemId)\r\n                    .ToList();\r\n\r\n                checkList.ForEach(\r\n                    x => checkListEditModels.Add(\r\n                        GetCheckListById(x)));\r\n\r\n                return checkListEditModels;\r\n                \r\n            }\r\n        }\r\n        \r\n        private static CheckListItemEditModel GetCheckListById(string checkListItemId)\r\n        {\r\n            using (var db = new ErpContext())\r\n            {\r\n                \r\n                CheckList existingCheckList = db.CheckList\r\n                    .FirstOrDefault(x => x.CheckListItemId == checkListItemId);\r\n                if (existingCheckList == null)\r\n                    return null;\r\n                CheckListItemEditModel checkListItemEditModel = new CheckListItemEditModel()\r\n                {\r\n                    CheckListItemId = existingCheckList.CheckListItemId,\r\n                    TaskId = existingCheckList.TaskId,\r\n                    Description = existingCheckList.Description,\r\n                    Status = (CStatus) Enum.Parse(typeof(CStatus), existingCheckList.Status, true),\r\n                    WorstCase = existingCheckList.WorstCase,\r\n                    BestCase = existingCheckList.BestCase,\r\n                    ResultType = existingCheckList.ResultType,\r\n                    Result = existingCheckList.Result,\r\n                    Essential = existingCheckList.Essential,\r\n                    UserComment = existingCheckList.UserComment,\r\n                    ManagerComment = existingCheckList.ManagerComment\r\n                    \r\n                    \r\n                };\r\n\r\n                return checkListItemEditModel;\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Services/CheckListManagementService.cs b/Services/CheckListManagementService.cs
--- a/Services/CheckListManagementService.cs	(revision 355c22f471cda0b0e947d9069697ab7e0f612e79)
+++ b/Services/CheckListManagementService.cs	(date 1658743824342)
@@ -133,7 +133,7 @@
                         checkList.TaskId = checkListItemEditModel.TaskId;
                         checkList.WorstCase = checkListItemEditModel.WorstCase;
                         checkList.BestCase = checkListItemEditModel.BestCase;
-                        checkList.ResultType = checkListItemEditModel.ResultType;
+                        checkList.ResultType = checkListItemEditModel.ResultType.ToString();
                         checkList.Essential = checkListItemEditModel.Essential;
                 } 
                
@@ -227,7 +227,7 @@
                     Status = (CStatus) Enum.Parse(typeof(CStatus), existingCheckList.Status, true),
                     WorstCase = existingCheckList.WorstCase,
                     BestCase = existingCheckList.BestCase,
-                    ResultType = existingCheckList.ResultType,
+                    ResultType = (RTypes) Enum.Parse(typeof(RTypes), existingCheckList.Status, true),
                     Result = existingCheckList.Result,
                     Essential = existingCheckList.Essential,
                     UserComment = existingCheckList.UserComment,
Index: Models/EditModels/SprintReportEditModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace flexli_erp_webapi.EditModels\r\n{\r\n    public class SprintReportEditModel\r\n    {\r\n        public string SprintReportLineItemId { get; set; }\r\n        \r\n        public string SprintId { get; set; }\r\n        \r\n        public string TaskId { get; set; }\r\n        \r\n        public string CheckListItemId { get; set; }\r\n        \r\n        public string Description { get; set; }\r\n        \r\n        public string ResultType { get; set; }\r\n        \r\n        public string Result { get; set; }\r\n        \r\n        public string UserComment { get; set; }\r\n        \r\n        public string ManagerComment { get; set; }\r\n        \r\n        public string Approved { get; set; }\r\n        \r\n        public CStatus Status { get; set; }\r\n        \r\n        public int? WorstCase { get; set; }\r\n        \r\n        public int? BestCase { get; set; }\r\n        \r\n        public int? Score { get; set; }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Models/EditModels/SprintReportEditModel.cs b/Models/EditModels/SprintReportEditModel.cs
--- a/Models/EditModels/SprintReportEditModel.cs	(revision 355c22f471cda0b0e947d9069697ab7e0f612e79)
+++ b/Models/EditModels/SprintReportEditModel.cs	(date 1658743569980)
@@ -12,7 +12,7 @@
         
         public string Description { get; set; }
         
-        public string ResultType { get; set; }
+        public RTypes ResultType { get; set; }
         
         public string Result { get; set; }
         
Index: Models/EditModels/CheckListItemEditModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\n\r\nnamespace flexli_erp_webapi.EditModels\r\n{\r\n    public enum CStatus { NotCompleted, Completed };\r\n    public class CheckListItemEditModel\r\n    {\r\n        public string CheckListItemId { get; set; }\r\n        \r\n        public string TaskId { get; set; }\r\n        \r\n        public string Description { get; set; }\r\n        \r\n        public CStatus Status { get; set; }\r\n        \r\n        public int? WorstCase { get; set; }\r\n        \r\n        public int? BestCase { get; set; }\r\n        \r\n        public string ResultType { get; set; }\r\n        \r\n        public string Result { get; set; }\r\n        \r\n        public string UserComment { get; set; }\r\n        \r\n        public string ManagerComment { get; set; }\r\n        \r\n        public bool Essential { get; set; }\r\n        \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Models/EditModels/CheckListItemEditModel.cs b/Models/EditModels/CheckListItemEditModel.cs
--- a/Models/EditModels/CheckListItemEditModel.cs	(revision 355c22f471cda0b0e947d9069697ab7e0f612e79)
+++ b/Models/EditModels/CheckListItemEditModel.cs	(date 1658743594015)
@@ -3,6 +3,7 @@
 namespace flexli_erp_webapi.EditModels
 {
     public enum CStatus { NotCompleted, Completed };
+    public enum RTypes { File, Numeric, Boolean };
     public class CheckListItemEditModel
     {
         public string CheckListItemId { get; set; }
@@ -17,7 +18,7 @@
         
         public int? BestCase { get; set; }
         
-        public string ResultType { get; set; }
+        public RTypes ResultType { get; set; }
         
         public string Result { get; set; }
         
